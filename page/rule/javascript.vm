#extends("/page/layout/frametwo.vm")

#block("body")
#require("./rule.css")
<section id="content" class="art-content">
<div class="container">
      <div id="markup">
        <article id="content" class="markdown-body">
          <h1>javascript规范</h1>
          <p><a href="#1-%E5%89%8D%E8%A8%80">1 前言</a></p>
          <p><a href="#2-%E4%BB%A3%E7%A0%81%E9%A3%8E%E6%A0%BC">2 代码风格</a></p>
          <p><a href="#21-%E6%96%87%E4%BB%B6">2.1 文件</a></p>
          <p><a href="#22%E7%9B%AE%E5%BD%95%E5%90%8D">2.2 目录名</a></p>
          <p><a href="#22-%E7%BB%93%E6%9E%84">2.3 结构</a></p>
          <p><a href="#231-%E7%BC%A9%E8%BF%9B">2.3.1 缩进</a></p>
          <p><a href="#232-%E7%A9%BA%E6%A0%BC">2.3.2 空格</a></p>
          <p><a href="#233-%E6%8D%A2%E8%A1%8C">2.3.3 换行</a></p>
          <p><a href="#234-%E8%AF%AD%E5%8F%A5">2.3.4 语句</a></p>
          <p><a href="#24-%E6%B3%A8%E9%87%8A">2.4 注释</a></p>
          <p><a href="#241-%E5%8D%95%E8%A1%8C%E6%B3%A8%E9%87%8A">2.4.1 单行注释</a></p>
          <p><a href="#242-%E5%A4%9A%E8%A1%8C%E6%B3%A8%E9%87%8A">2.4.2 多行注释</a></p>
          <p><a href="#243-%E6%96%87%E6%A1%A3%E5%8C%96%E6%B3%A8%E9%87%8A">2.4.3 文档化注释</a></p>
          <p><a href="#244-%E7%B1%BB%E5%9E%8B%E5%AE%9A%E4%B9%89">2.4.4 类型定义</a></p>
          <p><a href="#245-%E6%96%87%E4%BB%B6%E6%B3%A8%E9%87%8A">2.4.5 文件注释</a></p>
          <p><a href="#246-%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4%E6%B3%A8%E9%87%8A">2.4.6 命名空间注释</a></p>
          <p><a href="#247-%E7%B1%BB%E6%B3%A8%E9%87%8A">2.4.7 类注释</a></p>
          <p><a href="#248-%E5%87%BD%E6%95%B0/%E6%96%B9%E6%B3%95%E6%B3%A8%E9%87%8A">2.4.8 函数/方法注释</a></p>
          <p><a href="#249-%E4%BA%8B%E4%BB%B6%E6%B3%A8%E9%87%8A">2.4.9 事件注释</a></p>
          <p><a href="#2410-%E5%B8%B8%E9%87%8F%E6%B3%A8%E9%87%8A">2.4.10 常量注释</a></p>
          <p><a href="#2411-%E5%A4%8D%E6%9D%82%E7%B1%BB%E5%9E%8B%E6%B3%A8%E9%87%8A">2.4.11 复杂类型注释</a></p>
          <p><a href="#2412-amd-%E6%A8%A1%E5%9D%97%E6%B3%A8%E9%87%8A">2.4.12 AMD 模块注释</a></p>
          <p><a href="#2413-%E7%BB%86%E8%8A%82%E6%B3%A8%E9%87%8A">2.4.13 细节注释</a></p>
          <p><a href="#2414-%E5%B7%A5%E5%85%B7">2.4.14 工具</a></p>
          <p><a href="#3-%E5%8F%98%E9%87%8F%E5%A3%B0%E6%98%8E">3 变量声明</a></p>
          <p><a href="#31-%E5%8F%98%E9%87%8F">3.1 变量</a></p>
          <p><a href="#32-%E5%87%BD%E6%95%B0">3.2 函数</a> <a href="#321-%E5%87%BD%E6%95%B0%E5%A3%B0%E6%98%8E">3.2.1 函数声明</a></p>
          <p><a href="#322-%E5%87%BD%E6%95%B0%E9%95%BF%E5%BA%A6">3.2.2 函数长度</a></p>
          <p><a href="#323-%E9%97%AD%E5%8C%85">3.2.3 闭包</a></p>
          <p><a href="#33-null%E7%9A%84%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF">3.3 null的使用场景</a></p>
          <p><a href="#34-%E4%B8%8D%E9%80%82%E5%90%88null%E7%9A%84%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF">3.4 不适合null的使用场景</a></p>
          <p><a href="#35-undefined%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF">3.5 undefined使用场景</a></p>
          <p><a href="#36-%E5%AE%89%E5%85%A8">3.6 安全</a></p>
          <p><a href="#37-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1">3.7 面向对象</a></p>
          <p><a href="#38-%E4%BD%9C%E7%94%A8%E5%9F%9F%E7%9B%B8%E5%85%B3">3.8 作用域</a></p>
          <p><a href="#39-for">3.9 for</a></p>
          <p><a href="#310-%E5%8A%A8%E6%80%81%E7%89%B9%E6%80%A7">3.10 动态特性</a></p>
          <p><a href="#3101-eval">3.10.1 eval</a></p>
          <p><a href="#3102-with">3.10.2 with</a></p>
          <p><a href="#3103-delete">3.10.3 delete</a></p>
          <p><a href="#3104-%E5%8A%A8%E6%80%81%E6%89%A7%E8%A1%8C%E4%BB%A3%E7%A0%81">3.10.4 动态执行代码</a></p>
          <p><a href="#4-%E6%B5%8F%E8%A7%88%E5%99%A8%E7%8E%AF%E5%A2%83">4 浏览器环境</a></p>
          <p><a href="#41-%E6%A8%A1%E5%9D%97%E5%8C%96">4.1 模块化</a></p>
          <p><a href="#411-amd">4.1.1 AMD</a></p>
          <p><a href="#412-define">4.1.2 define</a></p>
          <p><a href="#413-require">4.1.3 require</a></p>
          <p><a href="#42-dom">4.2 DOM</a></p>
          <p><a href="#421-%E5%85%83%E7%B4%A0%E8%8E%B7%E5%8F%96">4.2.1 元素获取</a></p>
          <p><a href="#422-%E6%A0%B7%E5%BC%8F%E8%8E%B7%E5%8F%96">4.2.2 样式获取</a></p>
          <p><a href="#423-%E6%A0%B7%E5%BC%8F%E8%AE%BE%E7%BD%AE">4.2.3 样式设置</a></p>
          <p><a href="#424-dom-%E6%93%8D%E4%BD%9C">4.2.4 DOM 操作</a></p>
          <p><a href="#425-dom-%E4%BA%8B%E4%BB%B6">4.2.5 DOM 事件</a></p>
          <p><a href="#5-demo">5 DEMO</a></p>
          <p><a href="#6%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99">6 参考资料</a></p>
          <h2>1 前言</h2>
          <p>JavaScript在一直有着广泛的应用，特别是在浏览器端的行为管理。本文档的目标是使JavaScript代码风格保持一致，容易被理解和被维护。</p>
          <p>虽然本文档是针对JavaScript设计的，但是在使用各种JavaScript的预编译语言时(如TypeScript等)时，适用的部分也应尽量遵循本文档的约定。</p>
          <h2>2 代码风格</h2>
          <h2>2.1文件</h2>
          <h5>[建议] <code>JavaScript</code> 文件使用无 <code>BOM</code> 的 <code>UTF-8</code> 编码。</h5>
          <blockquote>
            <p>UTF-8 编码具有更广泛的适应性。BOM 在使用程序或工具处理文件时可能造成不必要的干扰。</p>
          </blockquote>
          <h5>[强制] 文件名必须全部用小写，文件名分隔符用中划线连接，版本连接符用实心点，合并文件的文件名连接符用下划线.如：</h5>
          <blockquote>
            <p><code>passport-core.min.js</code>和<code>reset-1.0_utils-1.0.css</code> 。</p>
          </blockquote>
          <h5>[建议] 在文件结尾处，保留一个空行。</h5>
          <h2>2.2目录名</h2>
          <h5>[强制] 目录名参照上一条规则,有复数结构时，要采用复数命名法，比如说：</h5>
          <blockquote>
            <p>scripts, styles, images, data-models</p>
          </blockquote>
          <h2>2.3结构</h2>
          <h5>[强制] 语句结束使用<code>;</code>结尾</h5>
          <h5>[强制] 对于代码中需要进行==逻辑判断的变量，进行强制类型转换或使用===代替 ,仅当判断<code>null</code>或 <code>undefined</code>时，允许使用<code>== null</code></h5>
          <h4>2.3.1 缩进</h4>
          <h5>[强制] 使用 <code>4</code> 个空格做为一个缩进层级，不允许使用 <code>2</code> 个空格 或 <code>tab</code> 字符。</h5>
          <h5>[强制] <code>switch</code> 下的 <code>case</code> 和 <code>default</code> 必须增加一个缩进层级。</h5>
          <p>示例：</p>
          <div class="codehilite">
            <pre><span class="c1">// good</span>
<span class="k">switch</span> <span class="p">(</span><span class="nx">variable</span><span class="p">)</span> <span class="p">{</span>

    <span class="k">case</span> <span class="s1">&#39;1&#39;</span><span class="o">:</span>
        <span class="c1">// do...</span>
        <span class="k">break</span><span class="p">;</span>

    <span class="k">default</span><span class="o">:</span>
        <span class="c1">// do...</span>

<span class="p">}</span>

<span class="c1">// bad</span>
<span class="k">switch</span> <span class="p">(</span><span class="nx">variable</span><span class="p">)</span> <span class="p">{</span>

<span class="k">case</span> <span class="s1">&#39;1&#39;</span><span class="o">:</span>
    <span class="c1">// do...</span>
    <span class="k">break</span><span class="p">;</span>

<span class="k">default</span><span class="o">:</span>
    <span class="c1">// do...</span>

<span class="p">}</span>
</pre>
          </div>
          <h4>2.3.2 空格</h4>
          <h5>[强制] 二元运算符两侧必须有一个空格，一元运算符与操作对象之间不允许有空格。</h5>
          <p>示例：</p>
          <div class="codehilite">
            <pre><span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="o">!</span><span class="nx">arr</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span>
<span class="nx">a</span><span class="o">++</span><span class="p">;</span>
<span class="nx">a</span> <span class="o">=</span> <span class="nx">b</span> <span class="o">+</span> <span class="nx">c</span><span class="p">;</span>
</pre>
          </div>
          <h5>[强制] 用作代码块起始的左花括号 <code>{</code> 前必须有一个空格。</h5>
          <p>示例：</p>
          <div class="codehilite">
            <pre><span class="c1">// good</span>
<span class="k">if</span> <span class="p">(</span><span class="nx">condition</span><span class="p">)</span> <span class="p">{</span>
<span class="p">}</span>

<span class="k">while</span> <span class="p">(</span><span class="nx">condition</span><span class="p">)</span> <span class="p">{</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nx">funcName</span><span class="p">()</span> <span class="p">{</span>
<span class="p">}</span>

<span class="c1">// bad</span>
<span class="k">if</span> <span class="p">(</span><span class="nx">condition</span><span class="p">){</span>
<span class="p">}</span>

<span class="k">while</span> <span class="p">(</span><span class="nx">condition</span><span class="p">){</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nx">funcName</span><span class="p">(){</span>
<span class="p">}</span>
</pre>
          </div>
          <h5>[强制] <code>if / else / for / while / function / switch / do / try / catch / finally</code> 关键字后，必须有一个空格。</h5>
          <p>示例：</p>
          <div class="codehilite">
            <pre><span class="c1">// good</span>
<span class="k">if</span> <span class="p">(</span><span class="nx">condition</span><span class="p">)</span> <span class="p">{</span>
<span class="p">}</span>

<span class="k">while</span> <span class="p">(</span><span class="nx">condition</span><span class="p">)</span> <span class="p">{</span>
<span class="p">}</span>

<span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
<span class="p">})();</span>

<span class="c1">// bad</span>
<span class="k">if</span><span class="p">(</span><span class="nx">condition</span><span class="p">)</span> <span class="p">{</span>
<span class="p">}</span>

<span class="k">while</span><span class="p">(</span><span class="nx">condition</span><span class="p">)</span> <span class="p">{</span>
<span class="p">}</span>

<span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
<span class="p">})();</span>
</pre>
          </div>
          <h5>[强制] 在对象创建时，属性中的 <code>:</code> 之后必须有空格，<code>:</code> 之前不允许有空格。</h5>
          <p>示例：</p>
          <div class="codehilite">
            <pre><span class="c1">// good</span>
<span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span>
    <span class="nx">a</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span>
    <span class="nx">b</span><span class="o">:</span> <span class="mi">2</span><span class="p">,</span>
    <span class="nx">c</span><span class="o">:</span> <span class="mi">3</span>
<span class="p">};</span>

<span class="c1">// bad</span>
<span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span>
    <span class="nx">a</span> <span class="o">:</span> <span class="mi">1</span><span class="p">,</span>
    <span class="nx">b</span><span class="o">:</span><span class="mi">2</span><span class="p">,</span>
    <span class="nx">c</span> <span class="o">:</span><span class="mi">3</span>
<span class="p">};</span>
</pre>
          </div>
          <h5>[强制] <code>,</code> 和 <code>;</code> 前不允许有空格。</h5>
          <p>示例：</p>
          <div class="codehilite">
            <pre><span class="c1">// good</span>
<span class="nx">callFunc</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">);</span>

<span class="c1">// bad</span>
<span class="nx">callFunc</span><span class="p">(</span><span class="nx">a</span> <span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="p">;</span>
</pre>
          </div>
          <h5>[强制] 在函数调用、函数声明、括号表达式、属性访问、<code>if / for / while / switch / catch</code> 等语句中，<code>()</code> 和 <code>[]</code> 内紧贴括号部分不允许有空格。</h5>
          <p>示例：</p>
          <div class="codehilite">
            <pre><span class="c1">// good</span>

<span class="nx">callFunc</span><span class="p">(</span><span class="nx">param1</span><span class="p">,</span> <span class="nx">param2</span><span class="p">,</span> <span class="nx">param3</span><span class="p">);</span>

<span class="nx">save</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">list</span><span class="p">[</span><span class="k">this</span><span class="p">.</span><span class="nx">indexes</span><span class="p">[</span><span class="nx">i</span><span class="p">]]);</span>

<span class="nx">needIncream</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="nx">variable</span> <span class="o">+=</span> <span class="nx">increament</span><span class="p">);</span>

<span class="k">if</span> <span class="p">(</span><span class="nx">num</span> <span class="o">&gt;</span> <span class="nx">list</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span> <span class="p">{</span>
<span class="p">}</span>

<span class="k">while</span> <span class="p">(</span><span class="nx">len</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span>
<span class="p">}</span>


<span class="c1">// bad</span>

<span class="nx">callFunc</span><span class="p">(</span> <span class="nx">param1</span><span class="p">,</span> <span class="nx">param2</span><span class="p">,</span> <span class="nx">param3</span> <span class="p">);</span>

<span class="nx">save</span><span class="p">(</span> <span class="k">this</span><span class="p">.</span><span class="nx">list</span><span class="p">[</span> <span class="k">this</span><span class="p">.</span><span class="nx">indexes</span><span class="p">[</span> <span class="nx">i</span> <span class="p">]</span> <span class="p">]</span> <span class="p">);</span>

<span class="nx">needIncreament</span> <span class="o">&amp;&amp;</span> <span class="p">(</span> <span class="nx">variable</span> <span class="o">+=</span> <span class="nx">increament</span> <span class="p">);</span>

<span class="k">if</span> <span class="p">(</span> <span class="nx">num</span> <span class="o">&gt;</span> <span class="nx">list</span><span class="p">.</span><span class="nx">length</span> <span class="p">)</span> <span class="p">{</span>
<span class="p">}</span>

<span class="k">while</span> <span class="p">(</span> <span class="nx">len</span><span class="o">--</span> <span class="p">)</span> <span class="p">{</span>
<span class="p">}</span>
</pre>
          </div>
          <h5>[强制] 单行声明的数组与对象，如果包含元素，<code>{}</code> 和 <code>[]</code> 内紧贴括号部分不允许包含空格。</h5>
          <blockquote>
            <p>声明包含元素的数组与对象，只有当内部元素的形式较为简单时，才允许写在一行。元素复杂的情况，还是应该换行书写。</p>
          </blockquote>
          <p>示例：</p>
          <div class="codehilite">
            <pre><span class="c1">// good</span>
<span class="kd">var</span> <span class="nx">arr1</span> <span class="o">=</span> <span class="p">[];</span>
<span class="kd">var</span> <span class="nx">arr2</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">];</span>
<span class="kd">var</span> <span class="nx">obj1</span> <span class="o">=</span> <span class="p">{};</span>
<span class="kd">var</span> <span class="nx">obj2</span> <span class="o">=</span> <span class="p">{</span><span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;obj&#39;</span><span class="p">};</span>
<span class="kd">var</span> <span class="nx">obj3</span> <span class="o">=</span> <span class="p">{</span>
    <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;obj&#39;</span><span class="p">,</span>
    <span class="nx">age</span><span class="o">:</span> <span class="mi">20</span><span class="p">,</span>
    <span class="nx">sex</span><span class="o">:</span> <span class="mi">1</span>
<span class="p">};</span>

<span class="c1">// bad</span>
<span class="kd">var</span> <span class="nx">arr1</span> <span class="o">=</span> <span class="p">[</span> <span class="p">];</span>
<span class="kd">var</span> <span class="nx">arr2</span> <span class="o">=</span> <span class="p">[</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span> <span class="p">];</span>
<span class="kd">var</span> <span class="nx">obj1</span> <span class="o">=</span> <span class="p">{</span> <span class="p">};</span>
<span class="kd">var</span> <span class="nx">obj2</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;obj&#39;</span> <span class="p">};</span>
<span class="kd">var</span> <span class="nx">obj3</span> <span class="o">=</span> <span class="p">{</span><span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;obj&#39;</span><span class="p">,</span> <span class="nx">age</span><span class="o">:</span> <span class="mi">20</span><span class="p">,</span> <span class="nx">sex</span><span class="o">:</span> <span class="mi">1</span><span class="p">};</span>
</pre>
          </div>
          <h5>[强制] 行尾不得有多余的空格。</h5>
          <h4>2.3.3 换行</h4>
          <h5>[强制] 每个独立语句结束后必须换行。</h5>
          <h5>[强制] 每行不得超过 <code>120</code> 个字符。</h5>
          <blockquote>
            <p>超长的不可分割的代码允许例外，比如复杂的正则表达式。长字符串不在例外之列。</p>
          </blockquote>
          <h5>[强制] 运算符处换行时，运算符必须在新行的行首。</h5>
          <p>示例：</p>
          <div class="codehilite">
            <pre><span class="c1">// good</span>
<span class="k">if</span> <span class="p">(</span><span class="nx">user</span><span class="p">.</span><span class="nx">isAuthenticated</span><span class="p">()</span>
    <span class="o">&amp;&amp;</span> <span class="nx">user</span><span class="p">.</span><span class="nx">isInRole</span><span class="p">(</span><span class="s1">&#39;admin&#39;</span><span class="p">)</span>
    <span class="o">&amp;&amp;</span> <span class="nx">user</span><span class="p">.</span><span class="nx">hasAuthority</span><span class="p">(</span><span class="s1">&#39;add-admin&#39;</span><span class="p">)</span>
    <span class="o">||</span> <span class="nx">user</span><span class="p">.</span><span class="nx">hasAuthority</span><span class="p">(</span><span class="s1">&#39;delete-admin&#39;</span><span class="p">)</span>
<span class="p">)</span> <span class="p">{</span>
    <span class="c1">// Code</span>
<span class="p">}</span>

<span class="kd">var</span> <span class="nx">result</span> <span class="o">=</span> <span class="nx">number1</span> <span class="o">+</span> <span class="nx">number2</span> <span class="o">+</span> <span class="nx">number3</span>
    <span class="o">+</span> <span class="nx">number4</span> <span class="o">+</span> <span class="nx">number5</span><span class="p">;</span>


<span class="c1">// bad</span>
<span class="k">if</span> <span class="p">(</span><span class="nx">user</span><span class="p">.</span><span class="nx">isAuthenticated</span><span class="p">()</span> <span class="o">&amp;&amp;</span>
    <span class="nx">user</span><span class="p">.</span><span class="nx">isInRole</span><span class="p">(</span><span class="s1">&#39;admin&#39;</span><span class="p">)</span> <span class="o">&amp;&amp;</span>
    <span class="nx">user</span><span class="p">.</span><span class="nx">hasAuthority</span><span class="p">(</span><span class="s1">&#39;add-admin&#39;</span><span class="p">)</span> <span class="o">||</span>
    <span class="nx">user</span><span class="p">.</span><span class="nx">hasAuthority</span><span class="p">(</span><span class="s1">&#39;delete-admin&#39;</span><span class="p">))</span> <span class="p">{</span>
    <span class="c1">// Code</span>
<span class="p">}</span>

<span class="kd">var</span> <span class="nx">result</span> <span class="o">=</span> <span class="nx">number1</span> <span class="o">+</span> <span class="nx">number2</span> <span class="o">+</span> <span class="nx">number3</span> <span class="o">+</span>
    <span class="nx">number4</span> <span class="o">+</span> <span class="nx">number5</span><span class="p">;</span>
</pre>
          </div>
          <h5>[强制] 在函数声明、函数表达式、函数调用、对象创建、数组创建、for语句等场景中，不允许在 <code>,</code> 或 <code>;</code> 前换行。</h5>
          <p>示例：</p>
          <div class="codehilite">
            <pre><span class="c1">// good</span>
<span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span>
    <span class="nx">a</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span>
    <span class="nx">b</span><span class="o">:</span> <span class="mi">2</span><span class="p">,</span>
    <span class="nx">c</span><span class="o">:</span> <span class="mi">3</span>
<span class="p">};</span>

<span class="nx">foo</span><span class="p">(</span>
    <span class="nx">aVeryVeryLongArgument</span><span class="p">,</span>
    <span class="nx">anotherVeryLongArgument</span><span class="p">,</span>
    <span class="nx">callback</span>
<span class="p">);</span>


<span class="c1">// bad</span>
<span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span>
    <span class="nx">a</span><span class="o">:</span> <span class="mi">1</span>
    <span class="p">,</span> <span class="nx">b</span><span class="o">:</span> <span class="mi">2</span>
    <span class="p">,</span> <span class="nx">c</span><span class="o">:</span> <span class="mi">3</span>
<span class="p">};</span>

<span class="nx">foo</span><span class="p">(</span>
    <span class="nx">aVeryVeryLongArgument</span>
    <span class="p">,</span> <span class="nx">anotherVeryLongArgument</span>
    <span class="p">,</span> <span class="nx">callback</span>
<span class="p">);</span>
</pre>
          </div>
          <h5>[建议] 不同行为或逻辑的语句集，使用空行隔开，更易阅读。</h5>
          <p>示例：</p>
          <div class="codehilite">
            <pre><span class="c1">// 仅为按逻辑换行的示例，不代表setStyle的最优实现</span>
<span class="kd">function</span> <span class="nx">setStyle</span><span class="p">(</span><span class="nx">element</span><span class="p">,</span> <span class="nx">property</span><span class="p">,</span> <span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">element</span> <span class="o">==</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="nx">element</span><span class="p">.</span><span class="nx">style</span><span class="p">[</span><span class="nx">property</span><span class="p">]</span> <span class="o">=</span> <span class="nx">value</span><span class="p">;</span>
<span class="p">}</span>
</pre>
          </div>
          <h5>[建议] 在语句的行长度超过 <code>120</code> 时，根据逻辑条件合理缩进。</h5>
          <p>示例：</p>
          <div class="codehilite">
            <pre><span class="c1">// 较复杂的逻辑条件组合，将每个条件独立一行，逻辑运算符放置在行首进行分隔，或将部分逻辑按逻辑组合进行分隔。</span>
<span class="c1">// 建议最终将右括号 ) 与左大括号 { 放在独立一行，保证与 if 内语句块能容易视觉辨识。</span>
<span class="k">if</span> <span class="p">(</span><span class="nx">user</span><span class="p">.</span><span class="nx">isAuthenticated</span><span class="p">()</span>
    <span class="o">&amp;&amp;</span> <span class="nx">user</span><span class="p">.</span><span class="nx">isInRole</span><span class="p">(</span><span class="s1">&#39;admin&#39;</span><span class="p">)</span>
    <span class="o">&amp;&amp;</span> <span class="nx">user</span><span class="p">.</span><span class="nx">hasAuthority</span><span class="p">(</span><span class="s1">&#39;add-admin&#39;</span><span class="p">)</span>
    <span class="o">||</span> <span class="nx">user</span><span class="p">.</span><span class="nx">hasAuthority</span><span class="p">(</span><span class="s1">&#39;delete-admin&#39;</span><span class="p">)</span>
<span class="p">)</span> <span class="p">{</span>
    <span class="c1">// Code</span>
<span class="p">}</span>

<span class="c1">// 按一定长度截断字符串，并使用 + 运算符进行连接。</span>
<span class="c1">// 分隔字符串尽量按语义进行，如不要在一个完整的名词中间断开。</span>
<span class="c1">// 特别的，对于HTML片段的拼接，通过缩进，保持和HTML相同的结构。</span>
<span class="kd">var</span> <span class="nx">html</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span> <span class="c1">// 此处用一个空字符串，以便整个HTML片段都在新行严格对齐</span>
    <span class="o">+</span> <span class="s1">&#39;&lt;article&gt;&#39;</span>
    <span class="o">+</span>     <span class="s1">&#39;&lt;h1&gt;Title here&lt;/h1&gt;&#39;</span>
    <span class="o">+</span>     <span class="s1">&#39;&lt;p&gt;This is a paragraph&lt;/p&gt;&#39;</span>
    <span class="o">+</span>     <span class="s1">&#39;&lt;footer&gt;Complete&lt;/footer&gt;&#39;</span>
    <span class="o">+</span> <span class="s1">&#39;&lt;/article&gt;&#39;</span><span class="p">;</span>

<span class="c1">// 也可使用数组来进行拼接，相对 + 更容易调整缩进。</span>
<span class="kd">var</span> <span class="nx">html</span> <span class="o">=</span> <span class="p">[</span>
    <span class="s1">&#39;&lt;article&gt;&#39;</span><span class="p">,</span>
        <span class="s1">&#39;&lt;h1&gt;Title here&lt;/h1&gt;&#39;</span><span class="p">,</span>
        <span class="s1">&#39;&lt;p&gt;This is a paragraph&lt;/p&gt;&#39;</span><span class="p">,</span>
        <span class="s1">&#39;&lt;footer&gt;Complete&lt;/footer&gt;&#39;</span><span class="p">,</span>
    <span class="s1">&#39;&lt;/article&gt;&#39;</span>
<span class="p">];</span>
<span class="nx">html</span> <span class="o">=</span> <span class="nx">html</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">);</span>

<span class="c1">// 当参数过多时，将每个参数独立写在一行上，并将结束的右括号 ) 独立一行。</span>
<span class="c1">// 所有参数必须增加一个缩进。</span>
<span class="nx">foo</span><span class="p">(</span>
    <span class="nx">aVeryVeryLongArgument</span><span class="p">,</span>
    <span class="nx">anotherVeryLongArgument</span><span class="p">,</span>
    <span class="nx">callback</span>
<span class="p">);</span>

<span class="c1">// 也可以按逻辑对参数进行组合。</span>
<span class="c1">// 最经典的是baidu.format函数，调用时将参数分为“模板”和“数据”两块</span>
<span class="nx">baidu</span><span class="p">.</span><span class="nx">format</span><span class="p">(</span>
    <span class="nx">dateFormatTemplate</span><span class="p">,</span>
    <span class="nx">year</span><span class="p">,</span> <span class="nx">month</span><span class="p">,</span> <span class="nx">date</span><span class="p">,</span> <span class="nx">hour</span><span class="p">,</span> <span class="nx">minute</span><span class="p">,</span> <span class="nx">second</span>
<span class="p">);</span>

<span class="c1">// 当函数调用时，如果有一个或以上参数跨越多行，应当每一个参数独立一行。</span>
<span class="c1">// 这通常出现在匿名函数或者对象初始化等作为参数时，如setTimeout函数等。</span>
<span class="nx">setTimeout</span><span class="p">(</span>
    <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
        <span class="nx">alert</span><span class="p">(</span><span class="s1">&#39;hello&#39;</span><span class="p">);</span>
    <span class="p">},</span>
    <span class="mi">200</span>
<span class="p">);</span>

<span class="nx">order</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">read</span><span class="p">(</span>
    <span class="s1">&#39;id=&#39;</span> <span class="o">+</span> <span class="nx">me</span><span class="p">.</span><span class="nx">model</span><span class="p">.</span><span class="nx">id</span><span class="p">,</span> 
    <span class="kd">function</span> <span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">me</span><span class="p">.</span><span class="nx">attchToModel</span><span class="p">(</span><span class="nx">data</span><span class="p">.</span><span class="nx">result</span><span class="p">);</span>
        <span class="nx">callback</span><span class="p">();</span>
    <span class="p">},</span> 
    <span class="mi">300</span>
<span class="p">);</span>

<span class="c1">// 链式调用较长时采用缩进进行调整。</span>
<span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#items&#39;</span><span class="p">)</span>
    <span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;.selected&#39;</span><span class="p">)</span>
    <span class="p">.</span><span class="nx">highlight</span><span class="p">()</span>
    <span class="p">.</span><span class="nx">end</span><span class="p">();</span>

<span class="c1">// 三元运算符由3部分组成，因此其换行应当根据每个部分的长度不同，形成不同的情况。</span>
<span class="kd">var</span> <span class="nx">result</span> <span class="o">=</span> <span class="nx">thisIsAVeryVeryLongCondition</span>
    <span class="o">?</span> <span class="nx">resultA</span> <span class="o">:</span> <span class="nx">resultB</span><span class="p">;</span>

<span class="kd">var</span> <span class="nx">result</span> <span class="o">=</span> <span class="nx">condition</span>
    <span class="o">?</span> <span class="nx">thisIsAVeryVeryLongResult</span>
    <span class="o">:</span> <span class="nx">resultB</span><span class="p">;</span>

<span class="c1">// 数组和对象初始化的混用，严格按照每个对象的 { 和结束 } 在独立一行的风格书写。</span>
<span class="kd">var</span> <span class="nx">array</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">{</span>
        <span class="c1">// ...</span>
    <span class="p">},</span>
    <span class="p">{</span>
        <span class="c1">// ...</span>
    <span class="p">}</span>
<span class="p">];</span>
</pre>
          </div>
          <h5>[建议] 对于 <code>if...else...</code>、<code>try...catch...finally</code> 等语句，推荐使用在 <code>}</code> 号后添加一个换行 的风格，使代码层次结构更清晰，阅读性更好。</h5>
          <p>示例：</p>
          <div class="codehilite">
            <pre><span class="k">if</span> <span class="p">(</span><span class="nx">condition</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// some statements;</span>
<span class="p">}</span>
<span class="k">else</span> <span class="p">{</span>
    <span class="c1">// some statements;</span>
<span class="p">}</span>

<span class="k">try</span> <span class="p">{</span>
    <span class="c1">// some statements;</span>
<span class="p">}</span>
<span class="k">catch</span> <span class="p">(</span><span class="nx">ex</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// some statements;</span>
<span class="p">}</span>
</pre>
          </div>
          <h4>2.3.4 语句</h4>
          <h5>[强制] 不得省略语句结束的分号。</h5>
          <h5>[强制] 在 <code>if / else / for / do / while</code> 语句中，即使只有一行，也不得省略块 <code>{...}</code>。</h5>
          <p>示例：</p>
          <div class="codehilite">
            <pre><span class="c1">// good</span>
<span class="k">if</span> <span class="p">(</span><span class="nx">condition</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">callFunc</span><span class="p">();</span>
<span class="p">}</span>

<span class="c1">// bad</span>
<span class="k">if</span> <span class="p">(</span><span class="nx">condition</span><span class="p">)</span> <span class="nx">callFunc</span><span class="p">();</span>
<span class="k">if</span> <span class="p">(</span><span class="nx">condition</span><span class="p">)</span>
    <span class="nx">callFunc</span><span class="p">();</span>
</pre>
          </div>
          <h5>[强制] 函数定义结束不允许添加分号。</h5>
          <p>示例：</p>
          <div class="codehilite">
            <pre><span class="c1">// good</span>
<span class="kd">function</span> <span class="nx">funcName</span><span class="p">()</span> <span class="p">{</span>
<span class="p">}</span>

<span class="c1">// bad</span>
<span class="kd">function</span> <span class="nx">funcName</span><span class="p">()</span> <span class="p">{</span>
<span class="p">};</span>

<span class="c1">// 如果是函数表达式，分号是不允许省略的。</span>
<span class="kd">var</span> <span class="nx">funcName</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
<span class="p">};</span>
</pre>
          </div>
          <h5>[强制] <code>IIFE</code> 必须在函数表达式外添加 <code>(</code>，非 <code>IIFE</code> 不得在函数表达式外添加 <code>(</code>。</h5>
          <blockquote>
            <p>IIFE = Immediately-Invoked Function Expression.</p>
          </blockquote>
          <p>额外的 ( 能够让代码在阅读的一开始就能判断函数是否立即被调用，进而明白接下来代码的用途。而不是一直拖到底部才恍然大悟。</p>
          <p>示例：</p>
          <div class="codehilite">
            <pre><span class="c1">// good</span>
<span class="kd">var</span> <span class="nx">task</span> <span class="o">=</span> <span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
   <span class="c1">// Code</span>
   <span class="k">return</span> <span class="nx">result</span><span class="p">;</span>
<span class="p">})();</span>

<span class="kd">var</span> <span class="nx">func</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
<span class="p">};</span>


<span class="c1">// bad</span>
<span class="kd">var</span> <span class="nx">task</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
    <span class="c1">// Code</span>
    <span class="k">return</span> <span class="nx">result</span><span class="p">;</span>
<span class="p">}();</span>

<span class="kd">var</span> <span class="nx">func</span> <span class="o">=</span> <span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
<span class="p">});</span>
</pre>
          </div>
          <h3>2.4 注释</h3>
          <h4>2.4.1 单行注释</h4>
          <h5>[强制] 必须独占一行。<code>//</code> 后跟一个空格，缩进与下一行被注释说明的代码一致。</h5>
          <h4>2.4.2 多行注释</h4>
          <h5>[建议] 避免使用 <code>/*...*/</code> 这样的多行注释。有多行注释内容时，使用多个单行注释。</h5>
          <h4>2.4.3 文档化注释</h4>
          <h5>[强制] 为了便于代码阅读和自文档化，以下内容必须包含以 <code>/**...*/</code> 形式的块注释中。</h5>
          <blockquote>
            <ol>
              <li>文件</li>
              <li>namespace</li>
              <li>类</li>
              <li>函数或方法</li>
              <li>类属性</li>
              <li>事件</li>
              <li>全局变量</li>
              <li>常量</li>
              <li>AMD 模块</li>
            </ol>
          </blockquote>
          <h5>[强制] 文档注释前必须空一行。</h5>
          <h5>[建议] 自文档化的文档说明 what，而不是 how。</h5>
          <h4>2.4.4 类型定义</h4>
          <h5>[强制] 类型定义都是以<code>{</code>开始, 以<code>}</code>结束。</h5>
          <blockquote>
            <p>常用类型如：{string}, {number}, {boolean}, {Object}, {Function}, {RegExp}, {Array}, {Date}。</p>
          </blockquote>
          <p>类型不仅局限于内置的类型，也可以是自定义的类型。比如定义了一个类 Developer，就可以使用它来定义一个参数和返回值的类型。</p>
          <h5>[强制] 对于基本类型 {string}, {number}, {boolean}，首字母必须小写。</h5>
          <table>
            <thead>
              <tr>
                <th>类型定义</th>
                <th>语法示例</th>
                <th>解释</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td>String</td>
                <td>{string}</td>
                <td>--</td>
              </tr>
              <tr>
                <td>Number</td>
                <td>{number}</td>
                <td>--</td>
              </tr>
              <tr>
                <td>Boolean</td>
                <td>{boolean}</td>
                <td>--</td>
              </tr>
              <tr>
                <td>Object</td>
                <td>{Object}</td>
                <td>--</td>
              </tr>
              <tr>
                <td>Function</td>
                <td>{Function}</td>
                <td>--</td>
              </tr>
              <tr>
                <td>RegExp</td>
                <td>{RegExp}</td>
                <td>--</td>
              </tr>
              <tr>
                <td>Array</td>
                <td>{Array}</td>
                <td>--</td>
              </tr>
              <tr>
                <td>Date</td>
                <td>{Date}</td>
                <td>--</td>
              </tr>
              <tr>
                <td>单一类型集合</td>
                <td>{Array.&lt;string&gt;}</td>
                <td>string 类型的数组</td>
              </tr>
              <tr>
                <td>多类型</td>
                <td>{(number｜boolean)}</td>
                <td>可能是 number 类型, 也可能是 boolean 类型</td>
              </tr>
              <tr>
                <td>允许为null</td>
                <td>{?number}</td>
                <td>可能是 number, 也可能是 null</td>
              </tr>
              <tr>
                <td>不允许为null</td>
                <td>{!Object}</td>
                <td>Object 类型, 但不是 null</td>
              </tr>
              <tr>
                <td>Function类型</td>
                <td>{function(number, boolean)}</td>
                <td>函数, 形参类型</td>
              </tr>
              <tr>
                <td>Function带返回值</td>
                <td>{function(number, boolean):string}</td>
                <td>函数, 形参, 返回值类型</td>
              </tr>
              <tr>
                <td>参数可选</td>
                <td>@param {string=} name</td>
                <td>可选参数, =为类型后缀</td>
              </tr>
              <tr>
                <td>可变参数</td>
                <td>@param {...number} args</td>
                <td>变长参数,  ...为类型前缀</td>
              </tr>
              <tr>
                <td>任意类型</td>
                <td>{*}</td>
                <td>任意类型</td>
              </tr>
              <tr>
                <td>可选任意类型</td>
                <td>@param {*=} name</td>
                <td>可选参数，类型不限</td>
              </tr>
              <tr>
                <td>可变任意类型</td>
                <td>@param {...*} args</td>
                <td>变长参数，类型不限</td>
              </tr>
            </tbody>
          </table>
          <h4>2.4.5 文件注释</h4>
          <h5>[强制] 文件顶部必须包含文件注释，用 <code>@file</code> 标识文件说明。</h5>
          <p>示例：</p>
          <div class="codehilite">
            <pre><span class="cm">/**</span>
<span class="cm"> * @file Describe the file</span>
<span class="cm"> */</span>
</pre>
          </div>
          <h5>[建议] 文件注释中可以用 <code>@author</code> 标识开发者信息。</h5>
          <blockquote>
            <p>开发者信息能够体现开发人员对文件的贡献，并且能够让遇到问题或希望了解相关信息的人找到维护人。通常情况文件在被创建时标识的是创建者。随着项目的进展，越来越多的人加入，参与这个文件的开发，新的作者应该被加入 <code>@author</code> 标识。</p>
          </blockquote>
          <p><code>@author</code> 标识具有多人时，原则是按照 <code>责任</code> 进行排序。通常的说就是如果有问题，就是找第一个人应该比找第二个人有效。比如文件的创建者由于各种原因，模块移交给了其他人或其他团队，后来因为新增需求，其他人在新增代码时，添加 <code>@author</code> 标识应该把自己的名字添加在创建人的前面。</p>
          <p><code>@author</code> 中的名字不允许被删除。任何劳动成果都应该被尊重。</p>
          <p>业务项目中，一个文件可能被多人频繁修改，并且每个人的维护时间都可能不会很长，不建议为文件增加 <code>@author</code> 标识。通过版本控制系统追踪变更，按业务逻辑单元确定模块的维护责任人，通过文档与wiki跟踪和查询，是更好的责任管理方式。</p>
          <p>对于业务逻辑无关的技术型基础项目，特别是开源的公共项目，应使用 <code>@author</code> 标识。</p>
          <p>示例：</p>
          <div class="codehilite">
            <pre><span class="cm">/**</span>
<span class="cm"> * @file Describe the file</span>
<span class="cm"> * @author author-name(mail-name@domain.com)</span>
<span class="cm"> *         author-name2(mail-name2@domain.com)</span>
<span class="cm"> */</span>
</pre>
          </div>
          <h4>2.4.6 命名空间注释</h4>
          <h5>[建议] 命名空间使用 <code>@namespace</code> 标识。</h5>
          <p>示例：</p>
          <div class="codehilite">
            <pre><span class="cm">/**</span>
<span class="cm"> * @namespace</span>
<span class="cm"> */</span>
<span class="kd">var</span> <span class="nx">util</span> <span class="o">=</span> <span class="p">{};</span>
</pre>
          </div>
          <h4>2.4.7 类注释</h4>
          <h5>[建议] 使用 <code>@class</code> 标记类或构造函数。</h5>
          <blockquote>
            <p>对于使用对象 <code>constructor</code> 属性来定义的构造函数，可以使用 <code>@constructor</code> 来标记。</p>
          </blockquote>
          <p>示例：</p>
          <div class="codehilite">
            <pre><span class="cm">/**</span>
<span class="cm"> * 描述</span>
<span class="cm"> *</span>
<span class="cm"> * @class</span>
<span class="cm"> */</span>
<span class="kd">function</span> <span class="nx">Developer</span><span class="p">()</span> <span class="p">{</span>
    <span class="c1">// constructor body</span>
<span class="p">}</span>
</pre>
          </div>
          <h5>[建议] 使用 <code>@extends</code> 标记类的继承信息。</h5>
          <p>示例：</p>
          <div class="codehilite">
            <pre><span class="cm">/**</span>
<span class="cm"> * 描述</span>
<span class="cm"> *</span>
<span class="cm"> * @class</span>
<span class="cm"> * @extends Developer</span>
<span class="cm"> */</span>
<span class="kd">function</span> <span class="nx">Fronteer</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">Developer</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
    <span class="c1">// constructor body</span>
<span class="p">}</span>
<span class="nx">util</span><span class="p">.</span><span class="nx">inherits</span><span class="p">(</span><span class="nx">Fronteer</span><span class="p">,</span> <span class="nx">Developer</span><span class="p">);</span>
</pre>
          </div>
          <h5>[强制] 使用包装方式扩展类成员时， 必须通过 <code>@lends</code> 进行重新指向。</h5>
          <blockquote>
            <p>没有 <code>@lends</code> 标记将无法为该类生成包含扩展类成员的文档。</p>
          </blockquote>
          <p>示例：</p>
          <div class="codehilite">
            <pre><span class="cm">/**</span>
<span class="cm"> * 类描述</span>
<span class="cm"> *</span>
<span class="cm"> * @class</span>
<span class="cm"> * @extends Developer</span>
<span class="cm"> */</span>
<span class="kd">function</span> <span class="nx">Fronteer</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">Developer</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
    <span class="c1">// constructor body</span>
<span class="p">}</span>

<span class="nx">util</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span>
    <span class="nx">Fronteer</span><span class="p">.</span><span class="nx">prototype</span><span class="p">,</span>
    <span class="cm">/** @lends Fronteer.prototype */</span><span class="p">{</span>
        <span class="nx">_getLevel</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
            <span class="c1">// TODO</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">);</span>
</pre>
          </div>
          <h5>[强制] 类的属性或方法等成员信息使用 <code>@public</code> / <code>@protected</code> / <code>@private</code> 中的任意一个，指明可访问性。</h5>
          <blockquote>
            <p>生成的文档中将有可访问性的标记，避免用户直接使用非 <code>public</code> 的属性或方法。</p>
          </blockquote>
          <p>示例：</p>
          <div class="codehilite">
            <pre><span class="cm">/**</span>
<span class="cm"> * 类描述</span>
<span class="cm"> *</span>
<span class="cm"> * @class</span>
<span class="cm"> * @extends Developer</span>
<span class="cm"> */</span>
<span class="kd">var</span> <span class="nx">Fronteer</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
    <span class="nx">Developer</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>

    <span class="cm">/**</span>
<span class="cm">     * 属性描述</span>
<span class="cm">     *</span>
<span class="cm">     * @type {string}</span>
<span class="cm">     * @private</span>
<span class="cm">     */</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">_level</span> <span class="o">=</span> <span class="s1">&#39;T12&#39;</span><span class="p">;</span>

    <span class="c1">// constructor body</span>
<span class="p">};</span>
<span class="nx">util</span><span class="p">.</span><span class="nx">inherits</span><span class="p">(</span><span class="nx">Fronteer</span><span class="p">,</span> <span class="nx">Developer</span><span class="p">);</span>

<span class="cm">/**</span>
<span class="cm"> * 方法描述</span>
<span class="cm"> *</span>
<span class="cm"> * @private</span>
<span class="cm"> * @return {string} 返回值描述</span>
<span class="cm"> */</span>
<span class="nx">Fronteer</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">_getLevel</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
<span class="p">};</span>
</pre>
          </div>
          <h4>2.4.8 函数/方法注释</h4>
          <h5>[强制] 函数/方法注释必须包含函数说明，有参数和返回值时必须使用注释标识。</h5>
          <h5>[强制] 参数和返回值注释必须包含类型信息和说明。</h5>
          <h5>[建议] 当函数是内部函数，外部不可访问时，可以使用 <code>@inner</code> 标识。</h5>
          <p>示例：</p>
          <div class="codehilite">
            <pre><span class="cm">/**</span>
<span class="cm"> * 函数描述</span>
<span class="cm"> *</span>
<span class="cm"> * @param {string} p1 参数1的说明</span>
<span class="cm"> * @param {string} p2 参数2的说明，比较长</span>
<span class="cm"> *     那就换行了.</span>
<span class="cm"> * @param {number=} p3 参数3的说明（可选）</span>
<span class="cm"> * @return {Object} 返回值描述</span>
<span class="cm"> */</span>
<span class="kd">function</span> <span class="nx">foo</span><span class="p">(</span><span class="nx">p1</span><span class="p">,</span> <span class="nx">p2</span><span class="p">,</span> <span class="nx">p3</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">p3</span> <span class="o">=</span> <span class="nx">p3</span> <span class="o">||</span> <span class="mi">10</span><span class="p">;</span>
    <span class="k">return</span> <span class="p">{</span>
        <span class="nx">p1</span><span class="o">:</span> <span class="nx">p1</span><span class="p">,</span>
        <span class="nx">p2</span><span class="o">:</span> <span class="nx">p2</span><span class="p">,</span>
        <span class="nx">p3</span><span class="o">:</span> <span class="nx">p3</span>
    <span class="p">};</span>
<span class="p">}</span>
</pre>
          </div>
          <h5>[强制] 对 Object 中各项的描述， 必须使用 <code>@param</code> 标识。</h5>
          <p>示例：</p>
          <div class="codehilite">
            <pre><span class="cm">/**</span>
<span class="cm"> * 函数描述</span>
<span class="cm"> *</span>
<span class="cm"> * @param {Object} option 参数描述</span>
<span class="cm"> * @param {string} option.url option项描述</span>
<span class="cm"> * @param {string=} option.method option项描述，可选参数</span>
<span class="cm"> */</span>
<span class="kd">function</span> <span class="nx">foo</span><span class="p">(</span><span class="nx">option</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// TODO</span>
<span class="p">}</span>
</pre>
          </div>
          <h5>[建议] 重写父类方法时， 应当添加 <code>@override</code> 标识。如果重写的形参个数、类型、顺序和返回值类型均未发生变化，可省略 <code>@param</code>、<code>@return</code>，仅用 <code>@override</code> 标识，否则仍应作完整注释。</h5>
          <blockquote>
            <p>简而言之，当子类重写的方法能直接套用父类的方法注释时可省略对参数与返回值的注释。</p>
          </blockquote>
          <h4>2.4.9 事件注释</h4>
          <h5>[强制] 必须使用 <code>@event</code> 标识事件，事件参数的标识与方法描述的参数标识相同。</h5>
          <p>示例：</p>
          <div class="codehilite">
            <pre><span class="cm">/**</span>
<span class="cm"> * 值变更时触发</span>
<span class="cm"> *</span>
<span class="cm"> * @event</span>
<span class="cm"> * @param {Object} e e描述</span>
<span class="cm"> * @param {string} e.before before描述</span>
<span class="cm"> * @param {string} e.after after描述</span>
<span class="cm"> */</span>
<span class="nx">onchange</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
<span class="p">}</span>
</pre>
          </div>
          <h5>[强制] 在会广播事件的函数前使用 <code>@fires</code> 标识广播的事件，在广播事件代码前使用 <code>@event</code> 标识事件。</h5>
          <h5>[建议] 对于事件对象的注释，使用 <code>@param</code> 标识，生成文档时可读性更好。</h5>
          <p>示例：</p>
          <div class="codehilite">
            <pre><span class="cm">/**</span>
<span class="cm"> * 点击处理</span>
<span class="cm"> *</span>
<span class="cm"> * @fires Select#change</span>
<span class="cm"> * @private</span>
<span class="cm"> */</span>
<span class="nx">Select</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">clickHandler</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
    <span class="cm">/**</span>
<span class="cm">     * 值变更时触发</span>
<span class="cm">     *</span>
<span class="cm">     * @event Select#change</span>
<span class="cm">     * @param {Object} e e描述</span>
<span class="cm">     * @param {string} e.before before描述</span>
<span class="cm">     * @param {string} e.after after描述</span>
<span class="cm">     */</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">fire</span><span class="p">(</span>
        <span class="s1">&#39;change&#39;</span><span class="p">,</span>
        <span class="p">{</span>
            <span class="nx">before</span><span class="o">:</span> <span class="s1">&#39;foo&#39;</span><span class="p">,</span>
            <span class="nx">after</span><span class="o">:</span> <span class="s1">&#39;bar&#39;</span>
        <span class="p">}</span>
    <span class="p">);</span>
<span class="p">};</span>
</pre>
          </div>
          <h4>2.4.10 常量注释</h4>
          <h5>[强制] 常量必须使用 <code>@const</code> 标记，并包含说明和类型信息。</h5>
          <p>示例：</p>
          <div class="codehilite">
            <pre><span class="cm">/**</span>
<span class="cm"> * 常量说明</span>
<span class="cm"> *</span>
<span class="cm"> * @const</span>
<span class="cm"> * @type {string}</span>
<span class="cm"> */</span>
<span class="kd">var</span> <span class="nx">REQUEST_URL</span> <span class="o">=</span> <span class="s1">&#39;myurl.do&#39;</span><span class="p">;</span>
</pre>
          </div>
          <h4>2.4.11 复杂类型注释</h4>
          <h5>[建议] 对于类型未定义的复杂结构的注释，可以使用 <code>@typedef</code> 标识来定义。</h5>
          <p>示例：</p>
          <div class="codehilite">
            <pre><span class="c1">// `namespaceA~` 可以换成其它 namepaths 前缀，目的是为了生成文档中能显示 `@typedef` 定义的类型和链接。</span>
<span class="cm">/**</span>
<span class="cm"> * 服务器</span>
<span class="cm"> *</span>
<span class="cm"> * @typedef {Object} namespaceA~Server</span>
<span class="cm"> * @property {string} host 主机</span>
<span class="cm"> * @property {number} port 端口</span>
<span class="cm"> */</span>

<span class="cm">/**</span>
<span class="cm"> * 服务器列表</span>
<span class="cm"> *</span>
<span class="cm"> * @type {Array.&lt;namespaceA~Server&gt;}</span>
<span class="cm"> */</span>
<span class="kd">var</span> <span class="nx">servers</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">{</span>
        <span class="nx">host</span><span class="o">:</span> <span class="s1">&#39;1.2.3.4&#39;</span><span class="p">,</span>
        <span class="nx">port</span><span class="o">:</span> <span class="mi">8080</span>
    <span class="p">},</span>
    <span class="p">{</span>
        <span class="nx">host</span><span class="o">:</span> <span class="s1">&#39;1.2.3.5&#39;</span><span class="p">,</span>
        <span class="nx">port</span><span class="o">:</span> <span class="mi">8081</span>
    <span class="p">}</span>
<span class="p">];</span>
</pre>
          </div>
          <h4>2.4.12 AMD 模块注释</h4>
          <h5>[强制] AMD 模块使用 <code>@module</code> 或 <code>@exports</code> 标识。</h5>
          <blockquote>
            <p>@exports 与 @module 都可以用来标识模块，区别在于 @module 可以省略模块名称。而只使用 @exports 时在 namepaths 中可以省略 module: 前缀。</p>
          </blockquote>
          <p>示例：</p>
          <div class="codehilite">
            <pre><span class="nx">define</span><span class="p">(</span>
    <span class="kd">function</span> <span class="p">(</span><span class="nx">require</span><span class="p">)</span> <span class="p">{</span>

        <span class="cm">/**</span>
<span class="cm">         * foo description</span>
<span class="cm">         *</span>
<span class="cm">         * @exports Foo</span>
<span class="cm">         */</span>
        <span class="kd">var</span> <span class="nx">foo</span> <span class="o">=</span> <span class="p">{</span>
            <span class="c1">// TODO</span>
        <span class="p">};</span>

        <span class="cm">/**</span>
<span class="cm">         * baz description</span>
<span class="cm">         *</span>
<span class="cm">         * @return {boolean} return description</span>
<span class="cm">         */</span>
        <span class="nx">foo</span><span class="p">.</span><span class="nx">baz</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
            <span class="c1">// TODO</span>
        <span class="p">};</span>

        <span class="k">return</span> <span class="nx">foo</span><span class="p">;</span>

    <span class="p">}</span>
<span class="p">);</span>
</pre>
          </div>
          <p>也可以在 exports 变量前使用 @module 标识：</p>
          <div class="codehilite">
            <pre><span class="nx">define</span><span class="p">(</span>
    <span class="kd">function</span> <span class="p">(</span><span class="nx">require</span><span class="p">)</span> <span class="p">{</span>

        <span class="cm">/**</span>
<span class="cm">         * module description.</span>
<span class="cm">         *</span>
<span class="cm">         * @module foo</span>
<span class="cm">         */</span>
        <span class="kd">var</span> <span class="nx">exports</span> <span class="o">=</span> <span class="p">{};</span>


        <span class="cm">/**</span>
<span class="cm">         * bar description</span>
<span class="cm">         *</span>
<span class="cm">         */</span>
        <span class="nx">exports</span><span class="p">.</span><span class="nx">bar</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
            <span class="c1">// TODO</span>
        <span class="p">};</span>

        <span class="k">return</span> <span class="nx">exports</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">);</span>
</pre>
          </div>
          <p>如果直接使用 factory 的 exports 参数，还可以：</p>
          <div class="codehilite">
            <pre><span class="cm">/**</span>
<span class="cm"> * module description.</span>
<span class="cm"> *</span>
<span class="cm"> * @module</span>
<span class="cm"> */</span>
<span class="nx">define</span><span class="p">(</span>
    <span class="kd">function</span> <span class="p">(</span><span class="nx">require</span><span class="p">,</span> <span class="nx">exports</span><span class="p">)</span> <span class="p">{</span>

        <span class="cm">/**</span>
<span class="cm">         * bar description</span>
<span class="cm">         *</span>
<span class="cm">         */</span>
        <span class="nx">exports</span><span class="p">.</span><span class="nx">bar</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
            <span class="c1">// TODO</span>
        <span class="p">};</span>
        <span class="k">return</span> <span class="nx">exports</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">);</span>
</pre>
          </div>
          <h5>[强制] 对于已使用 <code>@module</code> 标识为 AMD模块 的引用，在 <code>namepaths</code> 中必须增加 <code>module:</code> 作前缀。</h5>
          <blockquote>
            <p>namepaths 没有 module: 前缀时，生成的文档中将无法正确生成链接。</p>
          </blockquote>
          <p>示例：</p>
          <div class="codehilite">
            <pre><span class="cm">/**</span>
<span class="cm"> * 点击处理</span>
<span class="cm"> *</span>
<span class="cm"> * @fires module:Select#change</span>
<span class="cm"> * @private</span>
<span class="cm"> */</span>
<span class="nx">Select</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">clickHandler</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
    <span class="cm">/**</span>
<span class="cm">     * 值变更时触发</span>
<span class="cm">     *</span>
<span class="cm">     * @event module:Select#change</span>
<span class="cm">     * @param {Object} e e描述</span>
<span class="cm">     * @param {string} e.before before描述</span>
<span class="cm">     * @param {string} e.after after描述</span>
<span class="cm">     */</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">fire</span><span class="p">(</span>
        <span class="s1">&#39;change&#39;</span><span class="p">,</span>
        <span class="p">{</span>
            <span class="nx">before</span><span class="o">:</span> <span class="s1">&#39;foo&#39;</span><span class="p">,</span>
            <span class="nx">after</span><span class="o">:</span> <span class="s1">&#39;bar&#39;</span>
        <span class="p">}</span>
    <span class="p">);</span>
<span class="p">};</span>
</pre>
          </div>
          <h5>[建议] 对于类定义的模块，可以使用 <code>@alias</code> 标识构建函数。</h5>
          <p>示例：</p>
          <div class="codehilite">
            <pre><span class="cm">/**</span>
<span class="cm"> * A module representing a jacket.</span>
<span class="cm"> * @module jacket</span>
<span class="cm"> */</span>
<span class="nx">define</span><span class="p">(</span>
    <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>

        <span class="cm">/**</span>
<span class="cm">         * @class</span>
<span class="cm">         * @alias module:jacket</span>
<span class="cm">         */</span>
        <span class="kd">var</span> <span class="nx">Jacket</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
        <span class="p">};</span>

        <span class="k">return</span> <span class="nx">Jacket</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">);</span>
</pre>
          </div>
          <h5>[建议] 多模块定义时，可以使用 <code>@exports</code> 标识各个模块。</h5>
          <p>示例：</p>
          <div class="codehilite">
            <pre><span class="c1">// one module</span>
<span class="nx">define</span><span class="p">(</span><span class="s1">&#39;html/utils&#39;</span><span class="p">,</span>
    <span class="cm">/**</span>
<span class="cm">     * Utility functions to ease working with DOM elements.</span>
<span class="cm">     * @exports html/utils</span>
<span class="cm">     */</span>
    <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
        <span class="kd">var</span> <span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
        <span class="p">};</span>

        <span class="k">return</span> <span class="nx">exports</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">);</span>

<span class="c1">// another module</span>
<span class="nx">define</span><span class="p">(</span><span class="s1">&#39;tag&#39;</span><span class="p">,</span>
    <span class="cm">/** @exports tag */</span>
    <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
        <span class="kd">var</span> <span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
        <span class="p">};</span>

        <span class="k">return</span> <span class="nx">exports</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">);</span>
</pre>
          </div>
          <h5>[建议] 对于 exports 为 Object 的模块，可以使用<code>@namespace</code>标识。</h5>
          <blockquote>
            <p>使用 @namespace 而不是 @module 或 @exports 时，对模块的引用可以省略 module: 前缀。</p>
          </blockquote>
          <h5>[建议] 对于 exports 为类名的模块，使用 <code>@class</code> 和 <code>@exports</code> 标识。</h5>
          <p>示例：</p>
          <div class="codehilite">
            <pre><span class="c1">// 只使用 @class Bar 时，类方法和属性都必须增加 @name Bar#methodName 来标识，与 @exports 配合可以免除这一麻烦，并且在引用时可以省去 module: 前缀。</span>
<span class="c1">// 另外需要注意类名需要使用 var 定义的方式。</span>

<span class="cm">/**</span>
<span class="cm"> * Bar description</span>
<span class="cm"> *</span>
<span class="cm"> * @see foo</span>
<span class="cm"> * @exports  Bar</span>
<span class="cm"> * @class</span>
<span class="cm"> */</span>
<span class="kd">var</span> <span class="nx">Bar</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
    <span class="c1">// TODO</span>
<span class="p">};</span>

<span class="cm">/**</span>
<span class="cm"> * baz description</span>
<span class="cm"> *</span>
<span class="cm"> * @return {(string|Array)} return description</span>
<span class="cm"> */</span>
<span class="nx">Bar</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">baz</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
    <span class="c1">// TODO</span>
<span class="p">};</span>
</pre>
          </div>
          <h4>2.4.13 细节注释</h4>
          <p>对于内部实现、不容易理解的逻辑说明、摘要信息等，我们可能需要编写细节注释。</p>
          <h4>[建议] 细节注释遵循单行注释的格式。说明必须换行时，每行是一个单行注释的起始。</h4>
          <p>示例：</p>
          <div class="codehilite">
            <pre><span class="kd">function</span> <span class="nx">foo</span><span class="p">(</span><span class="nx">p1</span><span class="p">,</span> <span class="nx">p2</span><span class="p">,</span> <span class="nx">opt_p3</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// 这里对具体内部逻辑进行说明</span>
    <span class="c1">// 说明太长需要换行</span>
    <span class="k">for</span> <span class="p">(...)</span> <span class="p">{</span>
        <span class="p">....</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre>
          </div>
          <h5>[强制] 有时我们会使用一些特殊标记进行说明。特殊标记必须使用单行注释的形式。下面列举了一些常用标记：</h5>
          <blockquote>
            <ol>
              <li>TODO: 有功能待实现。此时需要对将要实现的功能进行简单说明。</li>
              <li>FIXME: 该处代码运行没问题，但可能由于时间赶或者其他原因，需要修正。此时需要对如何修正进行简单说明。</li>
              <li>HACK: 为修正某些问题而写的不太好或者使用了某些诡异手段的代码。此时需要对思路或诡异手段进行描述。</li>
              <li>XXX: 该处存在陷阱。此时需要对陷阱进行描述。</li>
            </ol>
          </blockquote>
          <h4>2.4.14 工具</h4>
          <blockquote>
            <p>暂定</p>
          </blockquote>
          <ul>
            <li>代码注释工具 DocBlockr 插件 </li>
            <li>格式化代码工具 JSFomat</li>
            <li>提交的代码需要通过 JSHint 审查</li>
          </ul>
          <h2>3 变量声明</h2>
          <h3>3.1 变量</h3>
          <h5>[强制] 声明变量必须加上 <code>var</code>  关键字</h5>
          <blockquote>
            <p>不通过 var 定义变量将导致变量污染全局环境。</p>
          </blockquote>
          <h5>[强制] 每个 <code>var</code> 只能声明一个变量。</h5>
          <blockquote>
            <p>一个 var 声明多个变量，容易导致较长的行长度，并且在修改时容易造成逗号和分号的混淆。</p>
          </blockquote>
          <p>示例：</p>
          <div class="codehilite">
            <pre><span class="c1">// good</span>
<span class="kd">var</span> <span class="nx">hangModules</span> <span class="o">=</span> <span class="p">[];</span>
<span class="kd">var</span> <span class="nx">missModules</span> <span class="o">=</span> <span class="p">[];</span>
<span class="kd">var</span> <span class="nx">visited</span> <span class="o">=</span> <span class="p">{};</span>

<span class="c1">// bad</span>
<span class="kd">var</span> <span class="nx">hangModules</span> <span class="o">=</span> <span class="p">[],</span>
    <span class="nx">missModules</span> <span class="o">=</span> <span class="p">[],</span>
    <span class="nx">visited</span> <span class="o">=</span> <span class="p">{};</span>
</pre>
          </div>
          <h5>[强制] 常量使用大写字符, 并用下划线分隔。如</h5>
          <div class="codehilite">
            <pre><span class="kd">var</span> <span class="nx">NAMES_LIKE_THIS</span> <span class="o">=</span> <span class="p">{};</span>
</pre>
          </div>
          <h5>[强制 使用驼峰式命名变量和函数 如：</h5>
          <div class="codehilite">
            <pre><span class="kd">var</span> <span class="nx">thisIsMyName</span> <span class="o">=</span> <span class="p">{};</span>
</pre>
          </div>
          <h5>[强制] 私有成员变量和方法命名以下划线开头，如：</h5>
          <div class="codehilite">
            <pre><span class="kd">var</span> <span class="nx">_this</span> <span class="o">=</span> <span class="p">{};</span>
</pre>
          </div>
          <h5>[强制] 涉及Android的，一律大写第一个字母 如：</h5>
          <div class="codehilite">
            <pre><span class="kd">var</span> <span class="nx">AndroidVersion</span> <span class="o">=</span> <span class="p">{};</span>
</pre>
          </div>
          <h5>[强制] 使用的ID的地方一定全大写 如：</h5>
          <div class="codehilite">
            <pre><span class="kd">var</span> <span class="nx">goodID</span> <span class="o">=</span> <span class="p">{};</span>
</pre>
          </div>
          <h5>[强制] 涉及iOS的，一律小写第一个，大写后两个字母 如：</h5>
          <div class="codehilite">
            <pre><span class="kd">var</span> <span class="nx">iOSVersion</span> <span class="o">=</span> <span class="p">{};</span>
</pre>
          </div>
          <h5>[强制] 使用单引号来定义字符串</h5>
          <h5>[强制] 禁止用new来实例化基本类型：</h5>
          <div class="codehilite">
            <pre><span class="c1">//bad</span>
<span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Boolean</span><span class="p">(</span><span class="kc">false</span><span class="p">);</span>

<span class="c1">//good</span>
<span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span> 
</pre>
          </div>
          <h5>[强制] 直接定义数组或对象，而不使用new关键字声明</h5>
          <div class="codehilite">
            <pre>    <span class="c1">//bad</span>
    <span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Array</span><span class="p">(),</span> <span class="nx">o</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Object</span><span class="p">();</span>
    <span class="c1">//bad</span>
    <span class="kd">var</span> <span class="nx">colors</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Array</span><span class="p">(</span><span class="s2">&quot;red&quot;</span><span class="p">,</span> <span class="s2">&quot;green&quot;</span><span class="p">,</span> <span class="s2">&quot;blue&quot;</span><span class="p">);</span>
    <span class="c1">//bad</span>
    <span class="kd">var</span> <span class="nx">team</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Team</span><span class="p">();</span>
    <span class="nx">team</span><span class="p">.</span><span class="nx">title</span> <span class="o">=</span> <span class="s2">&quot;bszTeam&quot;</span><span class="p">;</span>
    <span class="nx">team</span><span class="p">.</span><span class="nx">count</span> <span class="o">=</span> <span class="mi">25</span><span class="p">;</span>

    <span class="c1">//good</span>
    <span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="p">[],</span><span class="nx">o</span> <span class="o">=</span> <span class="p">{};</span>
    <span class="c1">// Good</span>
    <span class="kd">var</span> <span class="nx">colors</span> <span class="o">=</span> <span class="p">[</span> <span class="s2">&quot;red&quot;</span><span class="p">,</span> <span class="s2">&quot;green&quot;</span><span class="p">,</span> <span class="s2">&quot;blue&quot;</span> <span class="p">];</span>
    <span class="c1">// Good  semi colon 采用 Followed by space 的形式</span>
    <span class="kd">var</span> <span class="nx">team</span> <span class="o">=</span> <span class="p">{</span>
        <span class="nx">title</span><span class="o">:</span> <span class="s2">&quot;bszTeam&quot;</span><span class="p">,</span>
        <span class="nx">count</span><span class="o">:</span> <span class="mi">25</span>
    <span class="p">};</span>
</pre>
          </div>
          <h2>3.2 函数</h2>
          <h3>3.2.1 函数声明</h3>
          <h5>[强制] <code>函数</code> 使用 <code>Camel命名法</code>。</h5>
          <p>示例：</p>
          <div class="codehilite">
            <pre><span class="kd">function</span> <span class="nx">stringFormat</span><span class="p">(</span><span class="nx">source</span><span class="p">)</span> <span class="p">{</span>
<span class="p">}</span>
</pre>
          </div>
          <h5>[强制] 函数的 <code>参数</code> 使用 <code>Camel命名法</code>。</h5>
          <p>示例：</p>
          <div class="codehilite">
            <pre><span class="kd">function</span> <span class="nx">hear</span><span class="p">(</span><span class="nx">theBells</span><span class="p">)</span> <span class="p">{</span>
<span class="p">}</span>
</pre>
          </div>
          <h5>[强制] 禁止在代码块中声明函数.：</h5>
          <p>示例：</p>
          <div class="codehilite">
            <pre><span class="c1">//bad</span>
<span class="k">if</span> <span class="p">(</span><span class="kc">true</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">function</span> <span class="nx">foo</span><span class="p">()</span> <span class="p">{</span>
    <span class="c1">// do something</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="c1">//good</span>

<span class="k">if</span> <span class="p">(</span><span class="kc">true</span><span class="p">)</span> <span class="p">{</span> 
    <span class="kd">var</span> <span class="nx">good</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
        <span class="c1">// do something</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre>
          </div>
          <h5>[建议] 函数参数大于3个时，应以对象形式作为参数集传递</h5>
          <p>示例：</p>
          <div class="codehilite">
            <pre><span class="c1">//bad</span>
<span class="kd">function</span> <span class="nx">setStyle</span><span class="p">(</span><span class="nx">height</span><span class="p">,</span><span class="nx">width</span><span class="p">,</span><span class="nx">color</span><span class="p">,</span><span class="nx">padding</span><span class="p">){</span>
    <span class="c1">// do something</span>
<span class="p">}</span>

<span class="c1">//good</span>
<span class="cm">/**</span>
<span class="cm"> * 设置样式</span>
<span class="cm"> * @param {object} options 参数包含[height,width,color,padding]</span>
<span class="cm"> */</span>
<span class="kd">function</span> <span class="nx">setStyle</span><span class="p">(</span><span class="nx">options</span><span class="p">){</span>
    <span class="c1">// do something</span>
<span class="p">}</span>
</pre>
          </div>
          <h5>[强制] <code>类</code> 使用 <code>Pascal命名法</code>。</h5>
          <p>示例：</p>
          <div class="codehilite">
            <pre><span class="kd">function</span> <span class="nx">TextNode</span><span class="p">(</span><span class="nx">options</span><span class="p">)</span> <span class="p">{</span>
<span class="p">}</span>
</pre>
          </div>
          <h5>[强制] 类的 <code>方法 / 属性</code> 使用 <code>Camel命名法</code>。</h5>
          <p>示例：</p>
          <div class="codehilite">
            <pre><span class="kd">function</span> <span class="nx">TextNode</span><span class="p">(</span><span class="nx">value</span><span class="p">,</span> <span class="nx">engine</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">value</span> <span class="o">=</span> <span class="nx">value</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">engine</span> <span class="o">=</span> <span class="nx">engine</span><span class="p">;</span>
<span class="p">}</span>

<span class="nx">TextNode</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">clone</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">;</span>
<span class="p">};</span>
</pre>
          </div>
          <h5>[强制] 函数声明、具名函数表达式、函数调用中，函数名和 <code>(</code> 之间不允许有空格。</h5>
          <blockquote>
            <p>function declaration 和 function expression 的不同，function expression的()前后必须有空格，而function declaration 在有函数名的时候不需要空格， 没有函数名的时候需要空格</p>
          </blockquote>
          <div class="codehilite">
            <pre>    <span class="kd">function</span> <span class="nx">doSomething</span><span class="p">(</span><span class="nx">item</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// do something</span>
    <span class="p">}</span>

    <span class="kd">var</span> <span class="nx">doSomething</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">item</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// do something</span>
    <span class="p">}</span>

    <span class="c1">// Good</span>
    <span class="nx">doSomething</span><span class="p">(</span><span class="nx">item</span><span class="p">);</span>

    <span class="c1">// Bad: Looks like a block statement</span>
    <span class="nx">doSomething</span> <span class="p">(</span><span class="nx">item</span><span class="p">);</span>
</pre>
          </div>
          <h5>[强制] 立即执行函数的写法, 最外层包一层括号</h5>
          <div class="codehilite">
            <pre>    <span class="c1">// Good</span>
    <span class="kd">var</span> <span class="nx">value</span> <span class="o">=</span> <span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>

        <span class="c1">// function body</span>
        <span class="k">return</span> <span class="p">{</span>
            <span class="nx">message</span><span class="o">:</span> <span class="s2">&quot;Hi&quot;</span>
        <span class="p">}</span>
    <span class="p">}());</span>

    <span class="c1">// Good</span>
    <span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>

        <span class="kd">function</span> <span class="nx">doSomething</span><span class="p">()</span> <span class="p">{</span>
            <span class="c1">// code</span>
        <span class="p">}</span>

        <span class="kd">function</span> <span class="nx">doSomethingElse</span><span class="p">()</span> <span class="p">{</span>
            <span class="c1">// code</span>
        <span class="p">}</span>

    <span class="p">})();</span>
</pre>
          </div>
          <h5>[强制] "use strict" 决不允许全局使用， 必须放在函数的第一行， 可以用自执行函数包含大的代码段, 如果 "use strict" 在函数外使用， JSLint 和 JSHint 均会报错</h5>
          <h4>3.2.2 函数长度</h4>
          <h5>[建议] 一个函数的长度控制在 <code>50</code> 行以内。</h5>
          <blockquote>
            <p>将过多的逻辑单元混在一个大函数中，易导致难以维护。一个清晰易懂的函数应该完成单一的逻辑单元。复杂的操作应进一步抽取，通过函数的调用来体现流程。</p>
            <p>特定算法等不可分割的逻辑允许例外。</p>
          </blockquote>
          <h4>3.2.3 闭包</h4>
          <h5>[建议] 在适当的时候将闭包内大对象置为 <code>null</code>。</h5>
          <blockquote>
            <p>在 JavaScript 中，无需特别的关键词就可以使用闭包，一个函数可以任意访问在其定义的作用域外的变量。需要注意的是，函数的作用域是静态的，即在定义时决定，与调用的时机和方式没有任何关系。</p>
          </blockquote>
          <p>闭包会阻止一些变量的垃圾回收，对于较老旧的JavaScript引擎，可能导致外部所有变量均无法回收。</p>
          <p>首先一个较为明确的结论是，以下内容会影响到闭包内变量的回收：</p>
          <ul>
            <li>嵌套的函数中是否有使用该变量。</li>
            <li>嵌套的函数中是否有 <strong>直接调用eval</strong>。</li>
            <li>是否使用了 with 表达式。</li>
          </ul>
          <p>Chakra、V8 和 SpiderMonkey 将受以上因素的影响，表现出不尽相同又较为相似的回收策略，而JScript.dll和Carakan则完全没有这方面的优化，会完整保留整个 LexicalEnvironment 中的所有变量绑定，造成一定的内存消耗。</p>
          <p>由于对闭包内变量有回收优化策略的 Chakra、V8 和 SpiderMonkey 引擎的行为较为相似，因此可以总结如下，当返回一个函数 fn 时：</p>
          <ol>
            <li>如果 fn 的 [[Scope]] 是ObjectEnvironment（with 表达式生成 ObjectEnvironment，函数和 catch 表达式生成 DeclarativeEnvironment），则：
              <ol>
                <li>如果是 V8 引擎，则退出全过程。</li>
                <li>如果是 SpiderMonkey，则处理该 ObjectEnvironment 的外层 LexicalEnvironment。</li>
              </ol>
            </li>
            <li>获取当前 LexicalEnvironment 下的所有类型为 Function 的对象，对于每一个 Function 对象，分析其 FunctionBody：
              <ol>
                <li>如果 FunctionBody 中含有 <strong>直接调用eval</strong>，则退出全过程。</li>
                <li>否则得到所有的 Identifier。</li>
                <li>对于每一个 Identifier，设其为 name，根据查找变量引用的规则，从 LexicalEnvironment 中找出名称为 name 的绑定 binding。</li>
                <li>对 binding 添加 notSwap 属性，其值为 true。</li>
              </ol>
            </li>
            <li>检查当前 LexicalEnvironment 中的每一个变量绑定，如果该绑定有 notSwap 属性且值为 true，则：
              <ol>
                <li>如果是V8引擎，删除该绑定。</li>
                <li>如果是SpiderMonkey，将该绑定的值设为 undefined，将删除 notSwap 属性。</li>
              </ol>
            </li>
          </ol>
          <p>对于Chakra引擎，暂无法得知是按 V8 的模式还是按 SpiderMonkey 的模式进行。</p>
          <p>如果有 <strong>非常庞大</strong> 的对象，且预计会在 <strong>老旧的引擎</strong> 中执行，则使用闭包时，注意将闭包不需要的对象置为空引用。</p>
          <h5>[建议] 使用 <code>IIFE</code> 避免 <code>Lift 效应</code>。</h5>
          <p>解释：</p>
          <p>在引用函数外部变量时，函数执行时外部变量的值由运行时决定而非定义时，最典型的场景如下：</p>
          <div class="codehilite">
            <pre><span class="kd">var</span> <span class="nx">tasks</span> <span class="o">=</span> <span class="p">[];</span>
<span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="mi">5</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">tasks</span><span class="p">[</span><span class="nx">tasks</span><span class="p">.</span><span class="nx">length</span><span class="p">]</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Current cursor is at &#39;</span> <span class="o">+</span> <span class="nx">i</span><span class="p">);</span>
    <span class="p">};</span>
<span class="p">}</span>

<span class="kd">var</span> <span class="nx">len</span> <span class="o">=</span> <span class="nx">tasks</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span>
<span class="k">while</span> <span class="p">(</span><span class="nx">len</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">tasks</span><span class="p">[</span><span class="nx">len</span><span class="p">]();</span>
<span class="p">}</span>
</pre>
          </div>
          <p>以上代码对 tasks 中的函数的执行均会输出 <code>Current cursor is at 5</code>，往往不符合预期。</p>
          <p>此现象称为 <strong>Lift 效应</strong> 。解决的方式是通过额外加上一层闭包函数，将需要的外部变量作为参数传递来解除变量的绑定关系：</p>
          <div class="codehilite">
            <pre><span class="kd">var</span> <span class="nx">tasks</span> <span class="o">=</span> <span class="p">[];</span>
<span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="mi">5</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// 注意有一层额外的闭包</span>
    <span class="nx">tasks</span><span class="p">[</span><span class="nx">tasks</span><span class="p">.</span><span class="nx">length</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">i</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Current cursor is at &#39;</span> <span class="o">+</span> <span class="nx">i</span><span class="p">);</span>
        <span class="p">};</span>
    <span class="p">})(</span><span class="nx">i</span><span class="p">);</span>
<span class="p">}</span>

<span class="kd">var</span> <span class="nx">len</span> <span class="o">=</span> <span class="nx">tasks</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span>
<span class="k">while</span> <span class="p">(</span><span class="nx">len</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">tasks</span><span class="p">[</span><span class="nx">len</span><span class="p">]();</span>
<span class="p">}</span>
</pre>
          </div>
          <h3>3.3 null的使用场景</h3>
          <h5>[建议] 初始化一个将来可能被声明为一个对象的变量。</h5>
          <div class="codehilite">
            <pre><span class="c1">//声明对象为调用做准备</span>
<span class="kd">var</span> <span class="nx">goods</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
<span class="nx">goods</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#id&#39;</span><span class="p">)</span>
</pre>
          </div>
          <h5>[建议] 与一个可能是对象或者非对象的初始化变量相比。</h5>
          <div class="codehilite">
            <pre><span class="c1">// null 或 undefined</span>

<span class="c1">// good</span>
<span class="k">if</span> <span class="p">(</span><span class="nx">noValue</span> <span class="o">==</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// ......</span>
<span class="p">}</span>

<span class="k">typeof</span> <span class="nx">noValue</span> <span class="o">===</span> <span class="s1">&#39;undefined&#39;</span>
</pre>
          </div>
          <h5>[建议] 传入一个对象待定的函数。</h5>
          <div class="codehilite">
            <pre><span class="c1">//声明对象为调用做准备</span>
<span class="kd">var</span> <span class="nx">noFunction</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>

<span class="kd">function</span> <span class="nx">setValue</span><span class="p">(){</span>
    <span class="c1">//...</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nx">setTestValue</span><span class="p">(){</span>
    <span class="c1">//...</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nx">setStyle</span><span class="p">(</span><span class="nx">element</span><span class="p">,</span> <span class="nx">property</span><span class="p">,</span> <span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">element</span> <span class="o">==</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">noFunction</span> <span class="o">=</span>  <span class="nx">setTestValue</span><span class="p">;</span>
    <span class="p">}</span><span class="k">else</span><span class="p">{</span>
        <span class="nx">noFunction</span> <span class="o">=</span> <span class="nx">setValue</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="c1">//...</span>
<span class="p">}</span>
</pre>
          </div>
          <h5>[建议] 作为一个对象待定的函数的返回值。</h5>
          <h3>3.4 不适合null的使用场景</h3>
          <h5>[强制] 不要使用null来测试一个变量是否存在。</h5>
          <div class="codehilite">
            <pre><span class="c1">// bad</span>
<span class="k">if</span> <span class="p">(</span><span class="nx">noValue</span> <span class="o">==</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// ......</span>
<span class="p">}</span>

<span class="c1">//good</span>
<span class="k">if</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">noValue</span> <span class="o">===</span> <span class="s1">&#39;undefined&#39;</span><span class="p">){</span>
    <span class="c1">// ......</span>
<span class="p">}</span>
</pre>
          </div>
          <h5>[强制]  不要用null来测试一个没声明的变量。</h5>
          <h3>3.5 undefined使用场景</h3>
          <h5>[强制] 不要直接使用undefined进行变量判断</h5>
          <div class="codehilite">
            <pre>  <span class="c1">// Bad</span>
 <span class="kd">var</span> <span class="nx">person</span><span class="p">;</span>
 <span class="nx">console</span> <span class="nx">log</span><span class="p">(</span><span class="nx">person</span> <span class="o">===</span> <span class="kc">undefined</span><span class="p">);</span>    <span class="c1">//true</span>
</pre>
          </div>
          <h5>[强制] 使用字符串 "undefined" 对变量进行判断</h5>
          <div class="codehilite">
            <pre><span class="c1">// Good</span>
<span class="nx">console</span> <span class="nx">log</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">person</span><span class="p">);</span>    <span class="c1">// &quot;undefined&quot;</span>
</pre>
          </div>
          <h3>3.6 安全</h3>
          <h5>[强制] 审查用户输入</h5>
          <h5>[强制] 禁止通过在iframe使用script进行跨域回调</h5>
          <h5>[建议]尽量在可能但不确定出现异常的地方（大量运算，AJAX请求，数组操作或DOM操作等）用<code>try-catch(e)</code>来抛出异常，这样有利于规模较大的项目中排查错误,输出异常抛出错误信息</h5>
          <h3>3.7 面向对象</h3>
          <h5>[强制] 类的继承方案，实现时需要修正 <code>constructor</code>。</h5>
          <blockquote>
            <p>通常使用其他 library 的类继承方案都会进行 constructor 修正。如果是自己实现的类继承方案，需要进行 constructor 修正。</p>
          </blockquote>
          <p>示例：</p>
          <div class="codehilite">
            <pre><span class="cm">/**</span>
<span class="cm"> * 构建类之间的继承关系</span>
<span class="cm"> * </span>
<span class="cm"> * @param {Function} subClass 子类函数</span>
<span class="cm"> * @param {Function} superClass 父类函数</span>
<span class="cm"> */</span>
<span class="kd">function</span> <span class="nx">inherits</span><span class="p">(</span><span class="nx">subClass</span><span class="p">,</span> <span class="nx">superClass</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">F</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Function</span><span class="p">();</span>
    <span class="nx">F</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">=</span> <span class="nx">superClass</span><span class="p">.</span><span class="nx">prototype</span><span class="p">;</span>
    <span class="nx">subClass</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">F</span><span class="p">();</span>
    <span class="nx">subClass</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">constructor</span> <span class="o">=</span> <span class="nx">subClass</span><span class="p">;</span>
<span class="p">}</span>
</pre>
          </div>
          <h5>[建议] 声明类时，保证 <code>constructor</code> 的正确性。</h5>
          <p>示例：</p>
          <div class="codehilite">
            <pre><span class="kd">function</span> <span class="nx">Animal</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span><span class="p">;</span>
<span class="p">}</span>

<span class="c1">// 直接prototype等于对象时，需要修正constructor</span>
<span class="nx">Animal</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">=</span> <span class="p">{</span>
    <span class="nx">constructor</span><span class="o">:</span> <span class="nx">Animal</span><span class="p">,</span>

    <span class="nx">jump</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
        <span class="nx">alert</span><span class="p">(</span><span class="s1">&#39;animal &#39;</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">+</span> <span class="s1">&#39; jump&#39;</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">};</span>

<span class="c1">// 这种方式扩展prototype则无需理会constructor</span>
<span class="nx">Animal</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">jump</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
    <span class="nx">alert</span><span class="p">(</span><span class="s1">&#39;animal &#39;</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">+</span> <span class="s1">&#39; jump&#39;</span><span class="p">);</span>
<span class="p">};</span>
</pre>
          </div>
          <h5>[建议] 属性在构造函数中声明，方法在原型中声明。</h5>
          <blockquote>
            <p>原型对象的成员被所有实例共享，能节约内存占用。所以编码时我们应该遵守这样的原则：原型对象包含程序不会修改的成员，如方法函数或配置项。</p>
          </blockquote>
          <div class="codehilite">
            <pre><span class="kd">function</span> <span class="nx">TextNode</span><span class="p">(</span><span class="nx">value</span><span class="p">,</span> <span class="nx">engine</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">value</span> <span class="o">=</span> <span class="nx">value</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">engine</span> <span class="o">=</span> <span class="nx">engine</span><span class="p">;</span>
<span class="p">}</span>

<span class="nx">TextNode</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">clone</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">;</span>
<span class="p">};</span>
</pre>
          </div>
          <h5>[强制] 自定义事件的 <code>事件名</code> 必须全小写。</h5>
          <blockquote>
            <p>在 JavaScript 广泛应用的浏览器环境，绝大多数 DOM 事件名称都是全小写的。为了遵循大多数 JavaScript 开发者的习惯，在设计自定义事件时，事件名也应该全小写。</p>
          </blockquote>
          <h5>[强制] 自定义事件只能有一个 <code>event</code> 参数。如果事件需要传递较多信息，应仔细设计事件对象。</h5>
          <blockquote>
            <h6>一个事件对象的好处有：</h6>
            <ul>
              <li>顺序无关，避免事件监听者需要记忆参数顺序。</li>
              <li>每个事件信息都可以根据需要提供或者不提供，更自由。</li>
              <li>扩展方便，未来添加事件信息时，无需考虑会破坏监听器参数形式而无法向后兼容。</li>
            </ul>
          </blockquote>
          <h5>[建议] 设计自定义事件时，应考虑禁止默认行为。</h5>
          <blockquote>
            <h6>常见禁止默认行为的方式有两种：</h6>
            <ul>
              <li>事件监听函数中 return false。</li>
              <li>事件对象中包含禁止默认行为的方法，如 preventDefault。</li>
            </ul>
          </blockquote>
          <h3>3.8 作用域相关</h3>
          <h5>[强制] this仅用于类成员函数或对象中</h5>
          <h5>[强制] 通用全局函数，特别是通用组件代码应将业务逻辑放入闭包中，并通过“命名空间”将其引入</h5>
          <h5>[强制] 若函数中使用到全局变量，则访问全局变量时应使用window来引入</h5>
          <h5>[强制] 使用优雅的模版写法，避免多行字符串用\加换行的方式或使用+运算连接字符串这种难维护的编码方式</h5>
          <h3>3.9 for</h3>
          <h5>[强制] 普通<code>for</code>循环, 分号后留有一个空格， 判断条件等内的操作符两边不留空格， 前置条件如果有多个，逗号后留一个空格.</h5>
          <div class="codehilite">
            <pre>    <span class="kd">var</span> <span class="nx">values</span> <span class="o">=</span> <span class="p">[</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span> <span class="p">],</span>
        <span class="nx">i</span><span class="p">,</span> <span class="nx">len</span><span class="p">;</span>
    <span class="k">for</span> <span class="p">(</span><span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="nx">len</span><span class="o">=</span><span class="nx">values</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">&lt;</span><span class="nx">len</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">process</span><span class="p">(</span><span class="nx">values</span><span class="p">[</span><span class="nx">i</span><span class="p">]);</span>
    <span class="p">}</span>
</pre>
          </div>
          <h5>[强制] <code>for-in</code> 一定要有 <code>hasOwnProperty</code> 的判断， 否则 <code>JSLint</code> 或者 <code>JSHint</code> 都会有一个 <code>warn</code></h5>
          <div class="codehilite">
            <pre>    <span class="kd">var</span> <span class="nx">prop</span><span class="p">;</span>

    <span class="k">for</span> <span class="p">(</span><span class="nx">prop</span> <span class="k">in</span> <span class="nx">object</span><span class="p">)</span> <span class="p">{</span>

        <span class="c1">// 注意这里一定要有 hasOwnProperty 的判断， 否则 JSLint 或者 JSHint 都会有一个 warn ！</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">object</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">(</span><span class="nx">prop</span><span class="p">))</span> <span class="p">{</span>
            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Property name is &quot;</span> <span class="o">+</span> <span class="nx">prop</span><span class="p">);</span>
            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Property value is &quot;</span> <span class="o">+</span> <span class="nx">object</span><span class="p">[</span><span class="nx">prop</span><span class="p">]);</span>
        <span class="p">}</span>
    <span class="p">}</span>
</pre>
          </div>
          <h3>3.10 动态特性</h3>
          <h4>3.10.1 eval</h4>
          <h5>[强制] 避免使用<code>eval</code>函数</h5>
          <blockquote>
            <ul>
              <li>直接 eval，指的是以函数方式调用<code>eval</code>的调用方法。</li>
              <li>直接<code>eval</code>调用执行代码的作用域为本地作用域，应当避免。</li>
              <li>如果有特殊情况需要使用直接<code>eval</code>，需在代码中用详细的注释说明为何必须使用直接 <code>eval</code>，不能使用其它动态执行代码的方式，同时需要其他资深工程师进行 Code Review。</li>
            </ul>
          </blockquote>
          <h4>3.10.2 with</h4>
          <h5>[强制] with 非特殊业务， 禁用！！！</h5>
          <blockquote>
            <p>使用 with 可能会增加代码的复杂度，不利于阅读和管理；也会对性能有影响。大多数使用<code>with</code>的场景都能使用其他方式较好的替代。所以，尽量不要使用 with。</p>
          </blockquote>
          <h4>3.10.3 delete</h4>
          <h5>[建议] 减少 <code>delete</code> 的使用。</h5>
          <blockquote>
            <ul>
              <li>如果没有特别的需求，减少或避免使用<code>delete</code>。<code>delete</code>的使用会破坏部分 JavaScript 引擎的性能优化</li>
              <li>除非是必须移除类的成员，否则析构函数中对成员的销毁应通过将其设置为null，而不是用delete，因为重新赋值方式性能比用delete好。</li>
            </ul>
          </blockquote>
          <div class="codehilite">
            <pre><span class="k">try</span> <span class="p">{</span>
    <span class="k">delete</span> <span class="nx">o</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span>
<span class="p">}</span>
<span class="k">catch</span> <span class="p">(</span><span class="nx">deleteError</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">o</span><span class="p">.</span><span class="nx">x</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
<span class="p">}</span>
</pre>
          </div>
          <h5>[建议] 处理 <code>delete</code> 可能产生的异常。</h5>
          <blockquote>
            <ul>
              <li>对于有被遍历需求，且值 null 被认为具有业务逻辑意义的值的对象，移除某个属性必须使用 <code>delete</code> 操作。</li>
              <li>在严格模式或IE下使用 <code>delete</code> 时，不能被删除的属性会抛出异常，因此在不确定属性是否可以删除的情况下，建议添加 try-catch 块。</li>
            </ul>
          </blockquote>
          <div class="codehilite">
            <pre><span class="k">try</span> <span class="p">{</span>
    <span class="k">delete</span> <span class="nx">o</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span>
<span class="p">}</span>
<span class="k">catch</span> <span class="p">(</span><span class="nx">deleteError</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">o</span><span class="p">.</span><span class="nx">x</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
<span class="p">}</span>
</pre>
          </div>
          <h4>3.10.4 动态执行代码</h4>
          <h5>[建议] 使用 <code>new Function</code> 执行动态代码。</h5>
          <blockquote>
            <p>通过 new Function 生成的函数作用域是全局使用域，不会影响当当前的本地作用域。如果有动态代码执行的需求，建议使用 new Function。</p>
          </blockquote>
          <p>示例：</p>
          <div class="codehilite">
            <pre><span class="kd">var</span> <span class="nx">handler</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Function</span><span class="p">(</span><span class="s1">&#39;x&#39;</span><span class="p">,</span> <span class="s1">&#39;y&#39;</span><span class="p">,</span> <span class="s1">&#39;return x + y;&#39;</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">result</span> <span class="o">=</span> <span class="nx">handler</span><span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#x&#39;</span><span class="p">).</span><span class="nx">val</span><span class="p">(),</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#y&#39;</span><span class="p">).</span><span class="nx">val</span><span class="p">());</span>
</pre>
          </div>
          <h2>4 浏览器环境</h2>
          <h3>4.1 模块化</h3>
          <h4>4.1.1 AMD</h4>
          <h5>[强制] 使用 <code>AMD</code> 作为模块定义。</h5>
          <blockquote>
            <p>AMD 作为由社区认可的模块定义形式，提供多种重载提供灵活的使用方式，并且绝大多数优秀的 Library 都支持 AMD，适合作为规范。</p>
            <p>目前，比较成熟的 AMD Loader 有：</p>
            <ul>
              <li>官方实现的 <a href="http://requirejs.org/">requirejs</a></li>
              <li>百度自己实现的 <a href="https://github.com/ecomfe/esl">esl</a></li>
            </ul>
          </blockquote>
          <h5>[强制] 模块 <code>id</code> 必须符合标准。</h5>
          <blockquote>
            <p>模块 id 必须符合以下约束条件：</p>
            <ol>
              <li>类型为 string，并且是由 <code>/</code> 分割的一系列 terms 来组成。例如：<code>this/is/a/module</code>。</li>
              <li>term 应该符合 [a-zA-Z0-9_-]+ 规则。</li>
              <li>不应该有 .js 后缀。</li>
              <li>跟文件的路径保持一致。</li>
            </ol>
          </blockquote>
          <h4>4.1.2 define</h4>
          <h5>[建议] 定义模块时不要指明 <code>id</code> 和 <code>dependencies</code>。</h5>
          <blockquote>
            <p>在 AMD 的设计思想里，模块名称是和所在路径相关的，匿名的模块更利于封包和迁移。模块依赖应在模块定义内部通过 local require 引用。</p>
            <p>所以，推荐使用 define(factory) 的形式进行模块定义。</p>
          </blockquote>
          <p>示例：</p>
          <div class="codehilite">
            <pre><span class="nx">define</span><span class="p">(</span>
    <span class="kd">function</span> <span class="p">(</span><span class="nx">require</span><span class="p">)</span> <span class="p">{</span>
    <span class="p">}</span>
<span class="p">);</span>
</pre>
          </div>
          <h5>[建议] 使用 <code>return</code> 来返回模块定义。</h5>
          <blockquote>
            <p>使用 return 可以减少 factory 接收的参数（不需要接收 exports 和 module），在没有 AMD Loader 的场景下也更容易进行简单的处理来伪造一个 Loader。</p>
          </blockquote>
          <p>示例：</p>
          <div class="codehilite">
            <pre><span class="nx">define</span><span class="p">(</span>
    <span class="kd">function</span> <span class="p">(</span><span class="nx">require</span><span class="p">)</span> <span class="p">{</span>
        <span class="kd">var</span> <span class="nx">exports</span> <span class="o">=</span> <span class="p">{};</span>

        <span class="c1">// ...</span>

        <span class="k">return</span> <span class="nx">exports</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">);</span>
</pre>
          </div>
          <h4>4.1.3 require</h4>
          <h5>[强制] 全局运行环境中，<code>require</code> 必须以 <code>async require</code> 形式调用。</h5>
          <blockquote>
            <p>模块的加载过程是异步的，同步调用并无法保证得到正确的结果。</p>
          </blockquote>
          <p>示例：</p>
          <div class="codehilite">
            <pre><span class="c1">// good</span>
<span class="nx">require</span><span class="p">([</span><span class="s1">&#39;foo&#39;</span><span class="p">],</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">foo</span><span class="p">)</span> <span class="p">{</span>
<span class="p">});</span>

<span class="c1">// bad</span>
<span class="kd">var</span> <span class="nx">foo</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;foo&#39;</span><span class="p">);</span>
</pre>
          </div>
          <h5>[强制] 模块定义中只允许使用 <code>local require</code>，不允许使用 <code>global require</code>。</h5>
          <blockquote>
            <ol>
              <li>在模块定义中使用 global require，对封装性是一种破坏。</li>
              <li>在 AMD 里，global require 是可以被重命名的。并且 Loader 甚至没有全局的 require 变量，而是用 Loader 名称做为 global require。模块定义不应该依赖使用的 Loader。</li>
            </ol>
          </blockquote>
          <h5>[强制] Package在实现时，内部模块的 <code>require</code> 必须使用 <code>relative id</code>。</h5>
          <blockquote>
            <p>对于任何可能通过 发布-引入 的形式复用的第三方库、框架、包，开发者所定义的名称不代表使用者使用的名称。因此不要基于任何名称的假设。在实现源码中，require 自身的其它模块时使用 relative id。</p>
          </blockquote>
          <p>示例：</p>
          <div class="codehilite">
            <pre><span class="nx">define</span><span class="p">(</span>
    <span class="kd">function</span> <span class="p">(</span><span class="nx">require</span><span class="p">)</span> <span class="p">{</span>
        <span class="kd">var</span> <span class="nx">util</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./util&#39;</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">);</span>
</pre>
          </div>
          <h5>[建议] 不会被调用的依赖模块，在 <code>factory</code> 开始处统一 <code>require</code>。</h5>
          <blockquote>
            <p>有些模块是依赖的模块，但不会在模块实现中被直接调用，最为典型的是 css / js / tpl 等 Plugin 所引入的外部内容。此类内容建议放在模块定义最开始处统一引用。</p>
          </blockquote>
          <p>示例：</p>
          <div class="codehilite">
            <pre><span class="nx">define</span><span class="p">(</span>
    <span class="kd">function</span> <span class="p">(</span><span class="nx">require</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;css!foo.css&#39;</span><span class="p">);</span>
        <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;tpl!bar.tpl.html&#39;</span><span class="p">);</span>

        <span class="c1">// ...</span>
    <span class="p">}</span>
<span class="p">);</span>
</pre>
          </div>
          <h3>4.2 DOM</h3>
          <h4>4.2.1 元素获取</h4>
          <h5>[建议] 对于单个元素，尽可能使用 <code>document.getElementById</code> 获取，避免使用<code>document.all</code>。</h5>
          <h5>[建议] 对于多个元素的集合，尽可能使用 <code>context.getElementsByTagName</code> 获取。其中 <code>context</code> 可以为 <code>document</code> 或其他元素。指定 <code>tagName</code> 参数为 <code>*</code> 可以获得所有子元素。</h5>
          <h5>[建议] 遍历元素集合时，尽量缓存集合长度。如需多次操作同一集合，则应将集合转为数组。</h5>
          <blockquote>
            <p>原生获取元素集合的结果并不直接引用 DOM 元素，而是对索引进行读取，所以 DOM 结构的改变会实时反映到结果中。</p>
          </blockquote>
          <p>示例：</p>
          <div class="codehilite">
            <pre><span class="nt">&lt;div&gt;&lt;/div&gt;</span>
<span class="nt">&lt;span&gt;&lt;/span&gt;</span>

<span class="nt">&lt;script&gt;</span>
<span class="kd">var</span> <span class="nx">elements</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementsByTagName</span><span class="p">(</span><span class="s1">&#39;*&#39;</span><span class="p">);</span>

<span class="c1">// 显示为 DIV</span>
<span class="nx">alert</span><span class="p">(</span><span class="nx">elements</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">tagName</span><span class="p">);</span>

<span class="kd">var</span> <span class="nx">div</span> <span class="o">=</span> <span class="nx">elements</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
<span class="kd">var</span> <span class="nx">p</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s1">&#39;p&#39;</span><span class="p">);</span>
<span class="nx">docpment</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">insertBefore</span><span class="p">(</span><span class="nx">p</span><span class="p">,</span> <span class="nx">div</span><span class="p">);</span>

<span class="c1">// 显示为 P</span>
<span class="nx">alert</span><span class="p">(</span><span class="nx">elements</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">tagName</span><span class="p">);</span>
<span class="nt">&lt;/script&gt;</span>
</pre>
          </div>
          <h5>[建议] 获取元素的直接子元素时使用 <code>children</code>。避免使用<code>childNodes</code>，除非预期是需要包含文本、注释和属性类型的节点。</h5>
          <h4>4.2.2 样式获取</h4>
          <h5>[建议] 获取元素实际样式信息时，应使用 <code>getComputedStyle</code> 或 <code>currentStyle</code>。</h5>
          <blockquote>
            <p>通过 style 只能获得内联定义或通过 JavaScript 直接设置的样式。通过 CSS class 设置的元素样式无法直接通过 style 获取。</p>
          </blockquote>
          <h4>4.2.3 样式设置</h4>
          <h5>[建议] 尽可能通过为元素添加预定义的 className 来改变元素样式，避免直接操作 style 设置。</h5>
          <h5>[强制] 通过 style 对象设置元素样式时，对于带单位非 0 值的属性，不允许省略单位。</h5>
          <blockquote>
            <p>除了 IE，标准浏览器会忽略不规范的属性值，导致兼容性问题。</p>
          </blockquote>
          <h4>4.2.4 DOM 操作</h4>
          <h5>[建议] 操作 <code>DOM</code> 时，尽量减少页面 <code>reflow</code>。</h5>
          <blockquote>
            <p>页面 reflow 是非常耗时的行为，非常容易导致性能瓶颈。下面一些场景会触发浏览器的reflow：</p>
            <ul>
              <li>DOM元素的添加、修改（内容）、删除。</li>
              <li>应用新的样式或者修改任何影响元素布局的属性。</li>
              <li>Resize浏览器窗口、滚动页面。</li>
              <li>读取元素的某些属性（offsetLeft、offsetTop、offsetHeight、offsetWidth、scrollTop/Left/Width/Height、clientTop/Left/Width/Height、getComputedStyle()、currentStyle(in IE)) 。</li>
            </ul>
          </blockquote>
          <h5>[建议] 尽量减少 <code>DOM</code> 操作。</h5>
          <blockquote>
            <p>DOM 操作也是非常耗时的一种操作，减少 DOM 操作有助于提高性能。举一个简单的例子，构建一个列表。我们可以用两种方式：</p>
            <ol>
              <li>在循环体中 createElement 并 append 到父元素中。</li>
              <li>在循环体中拼接 HTML 字符串，循环结束后写父元素的 innerHTML。</li>
            </ol>
          </blockquote>
          <p>第一种方法看起来比较标准，但是每次循环都会对 DOM 进行操作，性能极低。在这里推荐使用第二种方法。</p>
          <h4>4.2.5 DOM 事件</h4>
          <h5>[建议] 优先使用 <code>addEventListener / attachEvent</code> 绑定事件，避免直接在 HTML 属性中或 DOM 的 <code>expando</code> 属性绑定事件处理。</h5>
          <blockquote>
            <p>expando 属性绑定事件容易导致互相覆盖。</p>
          </blockquote>
          <h5>[建议] 使用 <code>addEventListener</code> 时第三个参数使用 <code>false</code>。</h5>
          <blockquote>
            <p>标准浏览器中的 addEventListener 可以通过第三个参数指定两种时间触发模型：冒泡和捕获。而 IE 的 attachEvent 仅支持冒泡的事件触发。所以为了保持一致性，通常 addEventListener 的第三个参数都为 false。</p>
          </blockquote>
          <h5>[建议] 在没有事件自动管理的框架支持下，应持有监听器函数的引用，在适当时候（元素释放、页面卸载等）移除添加的监听器。</h5>
          <h2>5 DEMO</h2>
          <div class="codehilite">
            <pre><span class="cm">/**</span>
<span class="cm"> * == Javascript eXtension 模块 =========================================================================</span>
<span class="cm"> * @version 2.0</span>
<span class="cm"> * @author  YJL(&lt;a href=&quot;mailto:YJL@gmail.com&quot;&gt;YJL@gmail.com&lt;/a&gt;)</span>
<span class="cm"> * @description 描述文字</span>
<span class="cm"> * -------------------------------------------------------------- 2015.02.26 ----------------------------</span>
<span class="cm"> */</span>

<span class="kd">var</span> <span class="nx">bsz</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;bsz&#39;</span><span class="p">);</span>
<span class="cm">/**</span>
<span class="cm"> * 注释</span>
<span class="cm"> */</span>
<span class="nx">routerApp</span><span class="p">.</span><span class="nx">config</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">$stateProvider</span><span class="p">,</span> <span class="nx">$urlRouterProvider</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">packageContext</span> <span class="o">=</span> <span class="k">this</span><span class="p">,</span>
        <span class="nx">$D</span> <span class="o">=</span> <span class="nx">bsz</span><span class="p">.</span><span class="nx">dom</span><span class="p">,</span>
        <span class="nx">$E</span> <span class="o">=</span> <span class="nx">bsz</span><span class="p">.</span><span class="nx">event</span><span class="p">,</span>
        <span class="nx">$H</span> <span class="o">=</span> <span class="nx">bsz</span><span class="p">.</span><span class="nx">http</span><span class="p">;</span>

    <span class="c1">// 输出字符串：Hello world!</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Hello world!&#39;</span><span class="p">);</span>

    <span class="c1">// 输出this === bsz.team的判断结果</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span> <span class="o">===</span> <span class="nx">bsz</span><span class="p">.</span><span class="nx">team</span><span class="p">);</span>
<span class="p">});</span>
</pre>
          </div>
          <hr>
          <h2>6参考资料</h2>
          <ul>
            <li><a href="https://google-styleguide.googlecode.com/svn/trunk/javascriptguide.xml">google-style-guide</a> </li>
            <li><a href="http://www.w3.org/TR/DOM-Level-2-HTML/html.html">w3c-guid</a></li>
            <li><a href="http://jshint.com/">jshint-guid</a></li>
            <li><a href="http://alloyteam.github.io/code-guide/#js-indentation">alloyteam-code-guide</a></li>
            <li><a href="https://github.com/fex-team/styleguide/">fex-team-styleguide</a></li>
            <li><a href="http://usejsdoc.org/">JSDOC</a></li>
          </ul>
        </article>
      </div>
    </div>
</section>
#end   
    #require("page/rule/javascript.vm")
#end